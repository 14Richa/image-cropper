{"ast":null,"code":"// A few JavaScript Functions for Images and Files\n// Author: Justin Mitchel\n// Source: https://kirr.co/ndywes\n// Convert a Base64-encoded string to a File object\nexport function base64StringtoFile(base64String, filename) {\n  var arr = base64String.split(','),\n      mime = arr[0].match(/:(.*?);/)[1],\n      bstr = atob(arr[1]),\n      n = bstr.length,\n      u8arr = new Uint8Array(n);\n\n  while (n--) {\n    u8arr[n] = bstr.charCodeAt(n);\n  }\n\n  return new File([u8arr], filename, {\n    type: mime\n  });\n} // Download a Base64-encoded file\n\nexport function downloadBase64File(base64Data, filename) {\n  var element = document.createElement('a');\n  element.setAttribute('href', base64Data);\n  element.setAttribute('download', filename);\n  element.style.display = 'none';\n  document.body.appendChild(element);\n  element.click();\n  document.body.removeChild(element);\n} // Extract an Base64 Image's File Extension\n\nexport function extractImageFileExtensionFromBase64(base64Data) {\n  return base64Data.substring('data:image/'.length, base64Data.indexOf(\";base64\"));\n} // Base64 Image to Canvas with a Crop\n\nexport function image64toCanvasRef(canvasRef, image64, pixelCrop) {\n  const canvas = canvasRef; // document.createElement('canvas');\n\n  const scaleX = image64.naturalWidth / image64.width;\n  const scaleY = image64.naturalHeight / image64.height;\n  console.log(image64);\n  canvas.width = pixelCrop.width;\n  canvas.height = pixelCrop.height;\n  const ctx = canvas.getContext('2d');\n  const image = new Image();\n  image.src = image64;\n  console.log(image);\n\n  image.onload = function () {\n    if (canvas.width != 0) {\n      ctx.drawImage(image, pixelCrop.x * scaleX, pixelCrop.y * scaleY, pixelCrop.width * scaleX, pixelCrop.height * scaleY, 0, 0, pixelCrop.width, pixelCrop.height);\n    }\n  };\n}","map":{"version":3,"sources":["/home/alvis/Desktop/image-cropper/client/src/ResuableUtils.js"],"names":["base64StringtoFile","base64String","filename","arr","split","mime","match","bstr","atob","n","length","u8arr","Uint8Array","charCodeAt","File","type","downloadBase64File","base64Data","element","document","createElement","setAttribute","style","display","body","appendChild","click","removeChild","extractImageFileExtensionFromBase64","substring","indexOf","image64toCanvasRef","canvasRef","image64","pixelCrop","canvas","scaleX","naturalWidth","width","scaleY","naturalHeight","height","console","log","ctx","getContext","image","Image","src","onload","drawImage","x","y"],"mappings":"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","sourcesContent":["// A few JavaScript Functions for Images and Files\n// Author: Justin Mitchel\n// Source: https://kirr.co/ndywes\n\n// Convert a Base64-encoded string to a File object\nexport function base64StringtoFile (base64String, filename) {\n  var arr = base64String.split(','), mime = arr[0].match(/:(.*?);/)[1],\n    bstr = atob(arr[1]), n = bstr.length, u8arr = new Uint8Array(n)\n  while (n--) {\n    u8arr[n] = bstr.charCodeAt(n)\n  }\n  return new File([u8arr], filename, {type: mime})\n}\n\n// Download a Base64-encoded file\n\nexport function downloadBase64File (base64Data, filename) {\n  var element = document.createElement('a')\n  element.setAttribute('href', base64Data)\n  element.setAttribute('download', filename)\n  element.style.display = 'none'\n  document.body.appendChild(element)\n  element.click()\n  document.body.removeChild(element)\n}\n\n// Extract an Base64 Image's File Extension\nexport function extractImageFileExtensionFromBase64 (base64Data) {\n  return base64Data.substring('data:image/'.length, base64Data.indexOf(\";base64\"))\n}\n\n\n\n// Base64 Image to Canvas with a Crop\nexport function image64toCanvasRef (canvasRef, image64, pixelCrop) {\n  const canvas = canvasRef // document.createElement('canvas');\n  const scaleX = image64.naturalWidth / image64.width;\n  const scaleY = image64.naturalHeight / image64.height;\n  console.log(image64);\n  canvas.width = pixelCrop.width\n  canvas.height = pixelCrop.height\n  const ctx = canvas.getContext('2d')\n  const image = new Image()\n  image.src = image64\n  console.log(image);\n  image.onload = function () {\n    if(canvas.width!=0)\n    {\n      ctx.drawImage(\n          image,\n          pixelCrop.x * scaleX,\n          pixelCrop.y * scaleY,\n          pixelCrop.width * scaleX,\n          pixelCrop.height * scaleY,\n          0,\n          0,\n          pixelCrop.width,\n          pixelCrop.height\n        )\n    }\n  }\n}"]},"metadata":{},"sourceType":"module"}