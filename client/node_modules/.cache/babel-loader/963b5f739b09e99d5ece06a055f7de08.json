{"ast":null,"code":"var _jsxFileName = \"/home/alvis/Desktop/image-cropper/client/src/App.js\";\nimport React from 'react';\nimport Dropzone from 'react-dropzone';\nimport ReactCrop from 'react-image-crop';\nimport 'react-image-crop/dist/ReactCrop.css';\nimport { image64toCanvasRef, extractImageFileExtensionFromBase64, downloadBase64File, base64StringtoFile, makeClientCrop } from './ResuableUtils';\nimport { Upload, message, Icon, PageHeader, Tabs, Button, Statistic, Descriptions } from 'antd';\nimport { Menu, Dropdown, Row, Col } from 'antd';\nimport 'antd/dist/antd.css'; //const imgMaxSize = 100000000//bytes;\n//const FileTypes = ['image/x-png', 'image/png', 'image/jpg', 'image/jpeg', 'image/gif']\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.dummyRequest = ({\n      file,\n      onSuccess\n    }) => {\n      setTimeout(() => {\n        onSuccess(\"ok\");\n      }, 0);\n    };\n\n    this.onDropFn = info => {\n      if (info.file.status === 'done') {\n        let fileList = [...info.fileList];\n        fileList = fileList.slice(-1);\n        fileList = fileList.map(file => {\n          if (file.response) {\n            // Component will show file.url as link\n            file.url = file.response.url;\n          }\n\n          return file;\n        }); //this.setState({ fileList });  \n\n        const currentFile = fileList[0].originFileObj;\n        const reader = new FileReader();\n        console.log(info);\n        reader.addEventListener(\"load\", () => {\n          let image = new Image();\n          image.src = reader.result;\n\n          image.onload = () => {\n            if (image.width !== 1024 || image.height !== 1024) {\n              message.error(`Image is ${image.height} x ${image.width}. Please upload 1024 x 1024 image`);\n              info.fileList = [];\n            } else {\n              message.success(`${info.file.name} file uploaded successfully`);\n              this.setState({\n                imgSrc: reader.result,\n                imgSrcExt: extractImageFileExtensionFromBase64(reader.result)\n              });\n            }\n          };\n        }, false);\n        reader.readAsDataURL(currentFile);\n      } else if (info.file.status === 'error') {\n        message.error(`${info.file.name} file upload failed.`);\n      }\n    };\n\n    this.handleImageLoaded = image => {//console.log(image)\n      //this.imageRef = image;\n    };\n\n    this.handleOnCropChange = crop => {\n      console.log(\"Crop inside Cropchange \", crop);\n      this.setState({\n        crop: crop\n      }); //console.log(this.state)\n    };\n\n    this.handleOnCropComplete = (crop, pixelCrop) => {\n      console.log(\"Crop inside Cropcomplete\", crop);\n      const canvasRef = this.imagePreviewCanvasRef.current; //console.log(canvasRef);\n\n      const imgSrc = this.state.imgSrc;\n      console.log(canvasRef);\n      image64toCanvasRef(canvasRef, imgSrc, crop);\n    };\n\n    this.handleClearToDefault = event => {\n      if (event) event.preventDefault();\n      const canvas = this.imagePreviewCanvasRef.current;\n      const ctx = canvas.getContext('2d');\n      console.log(canvas);\n      ctx.clearRect(0, 0, canvas.width, canvas.height);\n      this.setState({\n        imgSrc: null,\n        imgSrcExt: null\n      }); //this.fileInputRef.current.value = null\n    };\n\n    this.changeCrop = ({\n      key\n    }) => {\n      message.info(`Click on item ${key}`);\n      let h, w;\n\n      switch (key) {\n        case \"1\":\n          h = 755;\n          w = 450;\n          break;\n\n        case \"2\":\n          h = 365;\n          w = 450;\n          break;\n\n        case \"3\":\n          h = 365;\n          w = 212;\n          break;\n\n        case \"4\":\n          h = 380;\n          w = 380;\n          break;\n\n        default:\n          h = 0;\n          w = 0;\n      }\n\n      this.setState({\n        crop: {\n          x: 0,\n          y: 0,\n          unit: \"px\",\n          height: h,\n          width: w\n        }\n      });\n      this.handleOnCropComplete({\n        unit: \"px\",\n        height: h,\n        width: w\n      });\n    };\n\n    this.menu = React.createElement(Menu, {\n      onClick: this.changeCrop,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 159\n      },\n      __self: this\n    }, React.createElement(Menu.Item, {\n      key: \"1\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 160\n      },\n      __self: this\n    }, \"755 x 450\"), React.createElement(Menu.Item, {\n      key: \"2\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 161\n      },\n      __self: this\n    }, \"365 x 450\"), React.createElement(Menu.Item, {\n      key: \"3\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 162\n      },\n      __self: this\n    }, \"365 x 212 \"), React.createElement(Menu.Item, {\n      key: \"4\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 163\n      },\n      __self: this\n    }, \"380 x 380 \"), React.createElement(Menu.Item, {\n      key: \"5\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 164\n      },\n      __self: this\n    }, \"Custom\"));\n\n    this.handleDownloadClick = event => {\n      event.preventDefault();\n      const imgSrc = this.state.imgSrc;\n\n      if (imgSrc) {\n        const canvasRef = this.imagePreviewCanvasRef.current;\n        const imgSrcExt = this.state.imgSrcExt;\n        const imageData64 = canvasRef.toDataURL('image/' + imgSrcExt);\n        const myFilename = \"previewFile.\" + imgSrcExt; // file to be uploaded\n\n        const myNewCroppedFile = base64StringtoFile(imageData64, myFilename);\n        console.log(myNewCroppedFile); // download file\n\n        downloadBase64File(imageData64, myFilename);\n        this.handleClearToDefault();\n      }\n    };\n\n    this.imagePreviewCanvasRef = React.createRef();\n    this.state = {\n      imgSrc: null,\n      croppedImageURL: null,\n      //fileList: null, \n      crop: {\n        unit: 'px',\n        height: 755,\n        width: 450\n      }\n    };\n  }\n\n  render() {\n    const _this$state = this.state,\n          imgSrc = _this$state.imgSrc,\n          croppedImageURL = _this$state.croppedImageURL,\n          fileList = _this$state.fileList;\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 189\n      },\n      __self: this\n    }, React.createElement(PageHeader, {\n      style: {\n        border: '1px solid rgb(235, 237, 240)'\n      } // onBack={() => window.history.back()}\n      ,\n      title: \"Image Cropper\",\n      subTitle: \"Small utility to crop images and store them locally\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 194\n      },\n      __self: this\n    }, React.createElement(Descriptions, {\n      size: \"small\",\n      column: 2,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 205\n      },\n      __self: this\n    }, React.createElement(Descriptions.Item, {\n      label: \"Created\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 206\n      },\n      __self: this\n    }, \"Richa Sharma\"), React.createElement(Descriptions.Item, {\n      label: \"Tech\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 207\n      },\n      __self: this\n    }, \" \", React.createElement(\"a\", {\n      href: \"https://reactjs.org/\",\n      target: \"_blank\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 207\n      },\n      __self: this\n    }, \"ReactJS\"), \" and \", React.createElement(\"a\", {\n      href: \"https://ant.design/docs/react/introduce\",\n      target: \"_blank\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 207\n      },\n      __self: this\n    }, \"Ant design \")), React.createElement(Descriptions.Item, {\n      label: \"Remarks\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 208\n      },\n      __self: this\n    }, \"Upload an image and choose the size you wish to crop to. You can choose pre-determined blocks or can do custom crop as well. It accepts images of size 1024x1024 only.\")), React.createElement(Row, {\n      style: {\n        padding: '20px 50px'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 213\n      },\n      __self: this\n    }, React.createElement(Col, {\n      span: 4,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 214\n      },\n      __self: this\n    }, React.createElement(Upload, {\n      onChange: this.onDropFn,\n      customRequest: this.dummyRequest,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 215\n      },\n      __self: this\n    }, React.createElement(Button, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 216\n      },\n      __self: this\n    }, React.createElement(Icon, {\n      type: \"upload\",\n      disabled: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 217\n      },\n      __self: this\n    }), \" Click to Upload\"))), React.createElement(Col, {\n      span: 8,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 221\n      },\n      __self: this\n    }, React.createElement(Dropdown.Button, {\n      overlay: this.menu,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 222\n      },\n      __self: this\n    }, React.createElement(\"a\", {\n      className: \"ant-dropdown-link\",\n      href: \"#\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 223\n      },\n      __self: this\n    }, \"Select the crop size\"))), React.createElement(Col, {\n      span: 2,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 229\n      },\n      __self: this\n    }, React.createElement(Button, {\n      disabled: !imgSrc,\n      onClick: this.handleDownloadClick,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 230\n      },\n      __self: this\n    }, \"Download\")), React.createElement(Col, {\n      span: 6,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 232\n      },\n      __self: this\n    }, React.createElement(Button, {\n      disabled: !imgSrc,\n      onClick: this.handleClearToDefault,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 233\n      },\n      __self: this\n    }, \"Clear\")))), imgSrc !== null ? React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 238\n      },\n      __self: this\n    }, React.createElement(Row, {\n      style: {\n        padding: '20px 20px'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 239\n      },\n      __self: this\n    }, React.createElement(Col, {\n      span: 12,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 240\n      },\n      __self: this\n    }, React.createElement(ReactCrop, {\n      src: imgSrc,\n      crop: this.state.crop,\n      onImageLoaded: this.handleImageLoaded,\n      onComplete: this.handleOnCropComplete,\n      onChange: this.handleOnCropChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 241\n      },\n      __self: this\n    })), React.createElement(Col, {\n      span: 4,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 249\n      },\n      __self: this\n    }), React.createElement(Col, {\n      span: 8,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 251\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 252\n      },\n      __self: this\n    }, \" Preview Crop \"), React.createElement(\"canvas\", {\n      ref: this.imagePreviewCanvasRef,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 253\n      },\n      __self: this\n    })))) : \"\");\n  }\n\n}\n\nexport default App; // <Dropzone  onDrop={this.onDropFn} accept={FileTypes} multiple={false} maxSize={imgMaxSize}>\n//             {({getRootProps, getInputProps}) => (\n//                 <section>\n//                   <div {...getRootProps()}>\n//                     <input {...getInputProps()} />\n//                     <Button>\n//                         <Icon type=\"upload\" /> Click to Upload\n//                     </Button>\n//                   </div>\n//                 </section>\n//             )}\n//         </Dropzone>","map":{"version":3,"sources":["/home/alvis/Desktop/image-cropper/client/src/App.js"],"names":["React","Dropzone","ReactCrop","image64toCanvasRef","extractImageFileExtensionFromBase64","downloadBase64File","base64StringtoFile","makeClientCrop","Upload","message","Icon","PageHeader","Tabs","Button","Statistic","Descriptions","Menu","Dropdown","Row","Col","App","Component","constructor","props","dummyRequest","file","onSuccess","setTimeout","onDropFn","info","status","fileList","slice","map","response","url","currentFile","originFileObj","reader","FileReader","console","log","addEventListener","image","Image","src","result","onload","width","height","error","success","name","setState","imgSrc","imgSrcExt","readAsDataURL","handleImageLoaded","handleOnCropChange","crop","handleOnCropComplete","pixelCrop","canvasRef","imagePreviewCanvasRef","current","state","handleClearToDefault","event","preventDefault","canvas","ctx","getContext","clearRect","changeCrop","key","h","w","x","y","unit","menu","handleDownloadClick","imageData64","toDataURL","myFilename","myNewCroppedFile","createRef","croppedImageURL","render","border","padding"],"mappings":"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","sourcesContent":["import React from 'react';\nimport Dropzone from 'react-dropzone';\nimport ReactCrop from 'react-image-crop';\nimport 'react-image-crop/dist/ReactCrop.css';\nimport {image64toCanvasRef, extractImageFileExtensionFromBase64, downloadBase64File, base64StringtoFile, makeClientCrop} from './ResuableUtils';\nimport { Upload, message, Icon, PageHeader, Tabs, Button, Statistic, Descriptions } from 'antd';\nimport { Menu, Dropdown, Row, Col } from 'antd';\nimport 'antd/dist/antd.css'\n//const imgMaxSize = 100000000//bytes;\n//const FileTypes = ['image/x-png', 'image/png', 'image/jpg', 'image/jpeg', 'image/gif']\n\n\n\nclass App extends React.Component {\n\nconstructor(props) {\n    super(props)\n    this.imagePreviewCanvasRef = React.createRef();\n    this.state = {\n        imgSrc: null,\n        croppedImageURL: null,\n        //fileList: null, \n        crop: {\n            unit: 'px',\n            height: 755,\n            width: 450\n            \n        } \n    }\n}\n    \ndummyRequest = ({ file, onSuccess }) => {\n  setTimeout(() => {\n    onSuccess(\"ok\");\n  }, 0);\n};\n\n\nonDropFn = (info) => {\n    if (info.file.status === 'done') {\n\n    let fileList = [...info.fileList];\n    fileList = fileList.slice(-1);\n    fileList = fileList.map(file => {\n      if (file.response) {\n        // Component will show file.url as link\n        file.url = file.response.url;\n      }\n      return file;\n    });\n    //this.setState({ fileList });  \n        const currentFile = fileList[0].originFileObj;\n        const reader = new FileReader()\n        console.log(info);\n        reader.addEventListener(\"load\", () => {\n            let image = new Image();\n            image.src = reader.result;\n            image.onload = () => {\n                if(image.width !== 1024 || image.height !== 1024){\n                    message.error(`Image is ${image.height} x ${image.width}. Please upload 1024 x 1024 image`);\n                    info.fileList = [];\n                }\n                else\n                {\n                    message.success(`${info.file.name} file uploaded successfully`);\n                    this.setState({\n                    imgSrc: reader.result,\n                    imgSrcExt:  extractImageFileExtensionFromBase64(reader.result)\n                    })\n\n                }\n            };\n\n        }, false)\n\n        reader.readAsDataURL(currentFile)\n        \n    }\n    else if (info.file.status === 'error') {\n        message.error(`${info.file.name} file upload failed.`);\n    }\n};\n\n\n\n    handleImageLoaded = (image) => {\n        //console.log(image)\n        //this.imageRef = image;\n    };\n    handleOnCropChange = (crop) => {\n        console.log(\"Crop inside Cropchange \", crop)\n        this.setState({crop:crop})\n        //console.log(this.state)\n    };\n    handleOnCropComplete = (crop, pixelCrop) => {\n\n        console.log(\"Crop inside Cropcomplete\", crop);\n        \n        const canvasRef = this.imagePreviewCanvasRef.current;\n        //console.log(canvasRef);\n        const {imgSrc} = this.state;\n        console.log(canvasRef);\n        image64toCanvasRef(canvasRef, imgSrc, crop);\n    };\n\n    handleClearToDefault = (event) =>{\n        if (event) event.preventDefault()\n        const canvas = this.imagePreviewCanvasRef.current\n        const ctx = canvas.getContext('2d');\n        console.log(canvas);\n        ctx.clearRect(0, 0, canvas.width, canvas.height)\n\n        this.setState({\n            imgSrc: null,\n            imgSrcExt: null,\n            \n\n        })\n        //this.fileInputRef.current.value = null\n    };\n\n    changeCrop = ({ key }) => {\n    message.info(`Click on item ${key}`);\n    let h,w;\n    switch(key) {\n        case \"1\":\n        h = 755; w= 450;\n        break;\n        case \"2\":\n        h = 365; w= 450;\n        break;\n        case \"3\":\n        h = 365; w= 212;\n        break;\n        case \"4\":\n        h = 380; w= 380;\n        break;\n        default:\n        h=0; w=0;\n    }\n    this.setState({\n        crop: {\n            x:0,\n            y:0,\n            unit: \"px\",\n            height: h,\n            width: w\n        }\n    })\n    this.handleOnCropComplete({\n            unit: \"px\",\n            height: h,\n            width: w\n        });\n\n    }\n\n    menu = (\n    <Menu onClick={this.changeCrop}>\n    <Menu.Item key=\"1\">755 x 450</Menu.Item>\n    <Menu.Item key=\"2\">365 x 450</Menu.Item>\n    <Menu.Item key=\"3\">365 x 212 </Menu.Item>\n    <Menu.Item key=\"4\">380 x 380 </Menu.Item>\n    <Menu.Item key=\"5\">Custom</Menu.Item>\n    </Menu>\n    );\n\n    handleDownloadClick = (event) => {\n        event.preventDefault()\n        const {imgSrc}  = this.state\n        if (imgSrc) {\n            const canvasRef = this.imagePreviewCanvasRef.current        \n            const {imgSrcExt} =  this.state\n            const imageData64 = canvasRef.toDataURL('image/' + imgSrcExt)\n            const myFilename = \"previewFile.\" + imgSrcExt\n\n            // file to be uploaded\n            const myNewCroppedFile = base64StringtoFile(imageData64, myFilename)\n            console.log(myNewCroppedFile)\n            // download file\n            downloadBase64File(imageData64, myFilename)\n            this.handleClearToDefault()\n        }\n    }\n\nrender(){\n    const {imgSrc, croppedImageURL, fileList} = this.state\n      return (\n        <div>\n\n   \n\n\n  <PageHeader\n      style={{\n        border: '1px solid rgb(235, 237, 240)',\n      }}\n      // onBack={() => window.history.back()}\n      title=\"Image Cropper\"\n      subTitle=\"Small utility to crop images and store them locally\"\n     \n      \n    >\n\n<Descriptions size=\"small\" column={2}>\n    <Descriptions.Item label=\"Created\">Richa Sharma</Descriptions.Item>\n    <Descriptions.Item label=\"Tech\"> <a href=\"https://reactjs.org/\" target = \"_blank\">ReactJS</a> and <a href=\"https://ant.design/docs/react/introduce\" target = \"_blank\">Ant design </a></Descriptions.Item>\n    <Descriptions.Item label=\"Remarks\">\n      Upload an image and choose the size you wish to crop to. You can choose pre-determined blocks or can do custom crop as well. It accepts images of size 1024x1024 only. \n    </Descriptions.Item>\n  </Descriptions>\n\n<Row style={{ padding: '20px 50px' }}>\n    <Col span={4}>\n    <Upload onChange={this.onDropFn} customRequest={this.dummyRequest} >\n    <Button>\n      <Icon type=\"upload\" disabled={true}/> Click to Upload\n    </Button>\n  </Upload>  \n</Col>\n<Col span={8}>\n        <Dropdown.Button overlay={this.menu}>\n        <a className=\"ant-dropdown-link\" href=\"#\">\n        Select the crop size\n        </a>\n        </Dropdown.Button>\n        \n</Col>\n<Col span={2}>\n<Button  disabled={!imgSrc} onClick={this.handleDownloadClick}>Download</Button>\n</Col>\n<Col span={6}>\n<Button   disabled={!imgSrc} onClick={this.handleClearToDefault}>Clear</Button>\n</Col>\n</Row>\n</PageHeader>\n        {imgSrc !== null ? \n            <div>\n            <Row style={{ padding: '20px 20px' }}> \n            <Col span={12}>\n                <ReactCrop src = {imgSrc} \n                crop = {this.state.crop} \n                onImageLoaded = {this.handleImageLoaded}\n                onComplete = {this.handleOnCropComplete}\n                onChange = {this.handleOnCropChange}/>\n            \n            \n            </Col>\n            <Col span={4}>\n            </Col>\n            <Col span={8}>\n            <p> Preview Crop </p>\n            <canvas ref={this.imagePreviewCanvasRef}></canvas>\n             \n              </Col>\n              </Row>\n            </div>\n            : \"\"}        \n        </div>\n        \n      );\n    }\n}\n\nexport default App;\n\n// <Dropzone  onDrop={this.onDropFn} accept={FileTypes} multiple={false} maxSize={imgMaxSize}>\n//             {({getRootProps, getInputProps}) => (\n//                 <section>\n//                   <div {...getRootProps()}>\n//                     <input {...getInputProps()} />\n                    \n//                     <Button>\n//                         <Icon type=\"upload\" /> Click to Upload\n//                     </Button>\n                    \n//                   </div>\n//                 </section>\n//             )}\n//         </Dropzone>"]},"metadata":{},"sourceType":"module"}