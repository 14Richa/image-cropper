{"ast":null,"code":"var _jsxFileName = \"/home/alvis/Desktop/image-cropper/client/src/App.js\";\nimport React from 'react';\nimport Dropzone from 'react-dropzone';\nimport ReactCrop from 'react-image-crop';\nimport 'react-image-crop/dist/ReactCrop.css';\nimport { image64toCanvasRef, extractImageFileExtensionFromBase64, downloadBase64File, base64StringtoFile, makeClientCrop } from './ResuableUtils';\nimport { Upload, message, Button, Icon } from 'antd';\nconst imgMaxSize = 100000000; //bytes;\n\nconst FileTypes = ['image/x-png', 'image/png', 'image/jpg', 'image/jpeg', 'image/gif'];\n\nclass App extends React.Component {\n  //const {acceptedFiles, getRootProps, getInputProps} = useDropzone();\n  constructor(props) {\n    super(props);\n\n    this.alertFile = files => {\n      if (files && files.length > 0) {\n        const currentFile = files[0];\n        const currentFileSize = currentFile.size;\n        const currentFileType = currentFile.type;\n\n        if (currentFileSize > imgMaxSize) {\n          alert(\"This file is too big\");\n          return false;\n        }\n\n        if (!FileTypes.includes(currentFileType)) {\n          alert(\"This file type is not supported\");\n          return false;\n        }\n\n        return true;\n      }\n    };\n\n    this.onDropFn = (files, rejectedFiles) => {\n      //console.log(files);\n      if (rejectedFiles && rejectedFiles.length > 0) {\n        this.alertFile(rejectedFiles);\n      }\n\n      if (files && files.length > 0) {\n        const isVerified = this.alertFile(files);\n\n        if (isVerified) {\n          const currentFile = files[0];\n          const reader = new FileReader();\n          reader.addEventListener(\"load\", () => {\n            this.setState({\n              imgSrc: reader.result,\n              imgSrcExt: extractImageFileExtensionFromBase64(reader.result)\n            });\n          }, false);\n          reader.readAsDataURL(currentFile);\n        }\n      }\n    };\n\n    this.handleImageLoaded = image => {//console.log(image)\n      //this.imageRef = image;\n    };\n\n    this.handleOnCropChange = crop => {\n      console.log(crop);\n      this.setState({\n        crop: crop\n      }); //console.log(this.state)\n    };\n\n    this.handleOnCropComplete = (crop, pixelCrop) => {\n      const canvasRef = this.imagePreviewCanvasRef.current;\n      console.log(canvasRef);\n      const imgSrc = this.state.imgSrc;\n      image64toCanvasRef(canvasRef, imgSrc, crop);\n    };\n\n    this.handleClearToDefault = event => {\n      if (event) event.preventDefault();\n      const canvas = this.imagePreviewCanvasRef.current;\n      const ctx = canvas.getContext('2d');\n      console.log(canvas);\n      ctx.clearRect(0, 0, canvas.width, canvas.height);\n      this.setState({\n        imgSrc: null,\n        imgSrcExt: null,\n        crop: {\n          aspect: 1 / 1\n        }\n      }); //this.fileInputRef.current.value = null\n    };\n\n    this.handleDownloadClick = event => {\n      event.preventDefault();\n      const imgSrc = this.state.imgSrc;\n\n      if (imgSrc) {\n        const canvasRef = this.imagePreviewCanvasRef.current;\n        const imgSrcExt = this.state.imgSrcExt;\n        const imageData64 = canvasRef.toDataURL('image/' + imgSrcExt);\n        const myFilename = \"previewFile.\" + imgSrcExt; // file to be uploaded\n\n        const myNewCroppedFile = base64StringtoFile(imageData64, myFilename);\n        console.log(myNewCroppedFile); // download file\n\n        downloadBase64File(imageData64, myFilename); //this.handleClearToDefault()\n      }\n    };\n\n    this.imagePreviewCanvasRef = React.createRef(); //this.fileInputRef = React.createRef()\n\n    this.state = {\n      imgSrc: null,\n      croppedImageURL: null,\n      crop: {\n        unit: 'px',\n        height: 755,\n        width: 450\n      }\n    };\n  }\n\n  render() {\n    const _this$state = this.state,\n          imgSrc = _this$state.imgSrc,\n          croppedImageURL = _this$state.croppedImageURL;\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134\n      },\n      __self: this\n    }, React.createElement(Dropzone, {\n      onDrop: this.onDropFn,\n      accept: FileTypes,\n      multiple: false,\n      maxSize: imgMaxSize,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135\n      },\n      __self: this\n    }, ({\n      getRootProps,\n      getInputProps\n    }) => React.createElement(\"section\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137\n      },\n      __self: this\n    }, React.createElement(\"div\", Object.assign({}, getRootProps(), {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138\n      },\n      __self: this\n    }), React.createElement(\"input\", Object.assign({}, getInputProps(), {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139\n      },\n      __self: this\n    })), React.createElement(Button, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140\n      },\n      __self: this\n    }, React.createElement(Icon, {\n      type: \"upload\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141\n      },\n      __self: this\n    }), \" Click to Upload\")))), imgSrc !== null ? React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 148\n      },\n      __self: this\n    }, React.createElement(ReactCrop, {\n      src: imgSrc,\n      crop: this.state.crop,\n      onImageLoaded: this.handleImageLoaded,\n      onComplete: this.handleOnCropComplete,\n      onChange: this.handleOnCropChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 149\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 155\n      },\n      __self: this\n    }), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 156\n      },\n      __self: this\n    }, \" Preview Canvas Crop \"), React.createElement(\"canvas\", {\n      ref: this.imagePreviewCanvasRef,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 157\n      },\n      __self: this\n    }), React.createElement(\"button\", {\n      onClick: this.handleDownloadClick,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 158\n      },\n      __self: this\n    }, \"Download\"), React.createElement(\"button\", {\n      onClick: this.handleClearToDefault,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 159\n      },\n      __self: this\n    }, \"Clear\")) : \"\");\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/home/alvis/Desktop/image-cropper/client/src/App.js"],"names":["React","Dropzone","ReactCrop","image64toCanvasRef","extractImageFileExtensionFromBase64","downloadBase64File","base64StringtoFile","makeClientCrop","Upload","message","Button","Icon","imgMaxSize","FileTypes","App","Component","constructor","props","alertFile","files","length","currentFile","currentFileSize","size","currentFileType","type","alert","includes","onDropFn","rejectedFiles","isVerified","reader","FileReader","addEventListener","setState","imgSrc","result","imgSrcExt","readAsDataURL","handleImageLoaded","image","handleOnCropChange","crop","console","log","handleOnCropComplete","pixelCrop","canvasRef","imagePreviewCanvasRef","current","state","handleClearToDefault","event","preventDefault","canvas","ctx","getContext","clearRect","width","height","aspect","handleDownloadClick","imageData64","toDataURL","myFilename","myNewCroppedFile","createRef","croppedImageURL","unit","render","getRootProps","getInputProps"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,gBAArB;AACA,OAAOC,SAAP,MAAsB,kBAAtB;AACA,OAAO,qCAAP;AACA,SAAQC,kBAAR,EAA4BC,mCAA5B,EAAiEC,kBAAjE,EAAqFC,kBAArF,EAAyGC,cAAzG,QAA8H,iBAA9H;AACA,SAASC,MAAT,EAAiBC,OAAjB,EAA0BC,MAA1B,EAAkCC,IAAlC,QAA8C,MAA9C;AAEA,MAAMC,UAAU,GAAG,SAAnB,C,CAA4B;;AAC5B,MAAMC,SAAS,GAAG,CAAC,aAAD,EAAgB,WAAhB,EAA6B,WAA7B,EAA0C,YAA1C,EAAwD,WAAxD,CAAlB;;AACA,MAAMC,GAAN,SAAkBd,KAAK,CAACe,SAAxB,CAAkC;AAChC;AACAC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;;AADiB,SAiBjBC,SAjBiB,GAiBJC,KAAD,IAAW;AACnB,UAAGA,KAAK,IAAIA,KAAK,CAACC,MAAN,GAAa,CAAzB,EAA2B;AACvB,cAAMC,WAAW,GAAGF,KAAK,CAAC,CAAD,CAAzB;AACA,cAAMG,eAAe,GAAGD,WAAW,CAACE,IAApC;AACA,cAAMC,eAAe,GAAGH,WAAW,CAACI,IAApC;;AACA,YAAGH,eAAe,GAAGV,UAArB,EAAgC;AAC5Bc,UAAAA,KAAK,CAAC,sBAAD,CAAL;AACA,iBAAO,KAAP;AACH;;AACD,YAAG,CAACb,SAAS,CAACc,QAAV,CAAmBH,eAAnB,CAAJ,EAAwC;AACpCE,UAAAA,KAAK,CAAC,iCAAD,CAAL;AACA,iBAAO,KAAP;AACH;;AACD,eAAO,IAAP;AACH;AAEJ,KAjCgB;;AAAA,SAmCjBE,QAnCiB,GAmCN,CAACT,KAAD,EAAQU,aAAR,KAA0B;AACjC;AACA,UAAGA,aAAa,IAAIA,aAAa,CAACT,MAAd,GAAuB,CAA3C,EAA6C;AAC1C,aAAKF,SAAL,CAAeW,aAAf;AACF;;AACD,UAAGV,KAAK,IAAIA,KAAK,CAACC,MAAN,GAAa,CAAzB,EAA4B;AACxB,cAAMU,UAAU,GAAG,KAAKZ,SAAL,CAAeC,KAAf,CAAnB;;AACA,YAAGW,UAAH,EAAe;AACX,gBAAMT,WAAW,GAAGF,KAAK,CAAC,CAAD,CAAzB;AACA,gBAAMY,MAAM,GAAG,IAAIC,UAAJ,EAAf;AACAD,UAAAA,MAAM,CAACE,gBAAP,CAAwB,MAAxB,EAAgC,MAAM;AAClC,iBAAKC,QAAL,CAAc;AACVC,cAAAA,MAAM,EAAEJ,MAAM,CAACK,MADL;AAEVC,cAAAA,SAAS,EAAGjC,mCAAmC,CAAC2B,MAAM,CAACK,MAAR;AAFrC,aAAd;AAKH,WAND,EAMG,KANH;AAQAL,UAAAA,MAAM,CAACO,aAAP,CAAqBjB,WAArB;AACH;AAGJ;AACJ,KA1DgB;;AAAA,SA6DjBkB,iBA7DiB,GA6DIC,KAAD,IAAW,CAC3B;AACA;AACH,KAhEgB;;AAAA,SAiEjBC,kBAjEiB,GAiEKC,IAAD,IAAU;AAC3BC,MAAAA,OAAO,CAACC,GAAR,CAAYF,IAAZ;AACA,WAAKR,QAAL,CAAc;AAACQ,QAAAA,IAAI,EAACA;AAAN,OAAd,EAF2B,CAG3B;AACH,KArEgB;;AAAA,SAsEjBG,oBAtEiB,GAsEM,CAACH,IAAD,EAAOI,SAAP,KAAqB;AAExC,YAAMC,SAAS,GAAG,KAAKC,qBAAL,CAA2BC,OAA7C;AACAN,MAAAA,OAAO,CAACC,GAAR,CAAYG,SAAZ;AAHwC,YAIjCZ,MAJiC,GAIvB,KAAKe,KAJkB,CAIjCf,MAJiC;AAKxChC,MAAAA,kBAAkB,CAAC4C,SAAD,EAAYZ,MAAZ,EAAoBO,IAApB,CAAlB;AACH,KA5EgB;;AAAA,SA8EjBS,oBA9EiB,GA8EOC,KAAD,IAAU;AAC7B,UAAIA,KAAJ,EAAWA,KAAK,CAACC,cAAN;AACX,YAAMC,MAAM,GAAG,KAAKN,qBAAL,CAA2BC,OAA1C;AACA,YAAMM,GAAG,GAAGD,MAAM,CAACE,UAAP,CAAkB,IAAlB,CAAZ;AACAb,MAAAA,OAAO,CAACC,GAAR,CAAYU,MAAZ;AACAC,MAAAA,GAAG,CAACE,SAAJ,CAAc,CAAd,EAAiB,CAAjB,EAAoBH,MAAM,CAACI,KAA3B,EAAkCJ,MAAM,CAACK,MAAzC;AAEA,WAAKzB,QAAL,CAAc;AACVC,QAAAA,MAAM,EAAE,IADE;AAEVE,QAAAA,SAAS,EAAE,IAFD;AAGVK,QAAAA,IAAI,EAAE;AACFkB,UAAAA,MAAM,EAAE,IAAE;AADR;AAHI,OAAd,EAP6B,CAe7B;AACH,KA9FgB;;AAAA,SAgGjBC,mBAhGiB,GAgGMT,KAAD,IAAW;AAC7BA,MAAAA,KAAK,CAACC,cAAN;AAD6B,YAEtBlB,MAFsB,GAEX,KAAKe,KAFM,CAEtBf,MAFsB;;AAG7B,UAAIA,MAAJ,EAAY;AACR,cAAMY,SAAS,GAAG,KAAKC,qBAAL,CAA2BC,OAA7C;AADQ,cAGDZ,SAHC,GAGa,KAAKa,KAHlB,CAGDb,SAHC;AAIR,cAAMyB,WAAW,GAAGf,SAAS,CAACgB,SAAV,CAAoB,WAAW1B,SAA/B,CAApB;AAGA,cAAM2B,UAAU,GAAG,iBAAiB3B,SAApC,CAPQ,CASR;;AACA,cAAM4B,gBAAgB,GAAG3D,kBAAkB,CAACwD,WAAD,EAAcE,UAAd,CAA3C;AACArB,QAAAA,OAAO,CAACC,GAAR,CAAYqB,gBAAZ,EAXQ,CAYR;;AACA5D,QAAAA,kBAAkB,CAACyD,WAAD,EAAcE,UAAd,CAAlB,CAbQ,CAcR;AACH;AACJ,KAnHgB;;AAEjB,SAAKhB,qBAAL,GAA6BhD,KAAK,CAACkE,SAAN,EAA7B,CAFiB,CAGjB;;AACA,SAAKhB,KAAL,GAAa;AACTf,MAAAA,MAAM,EAAE,IADC;AAETgC,MAAAA,eAAe,EAAE,IAFR;AAGTzB,MAAAA,IAAI,EAAE;AACF0B,QAAAA,IAAI,EAAE,IADJ;AAEFT,QAAAA,MAAM,EAAE,GAFN;AAGFD,QAAAA,KAAK,EAAE;AAHL;AAHG,KAAb;AAUD;;AAyGHW,EAAAA,MAAM,GAAE;AAAA,wBAC8B,KAAKnB,KADnC;AAAA,UACGf,MADH,eACGA,MADH;AAAA,UACWgC,eADX,eACWA,eADX;AAEF,WACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACA,oBAAC,QAAD;AAAW,MAAA,MAAM,EAAE,KAAKvC,QAAxB;AAAkC,MAAA,MAAM,EAAEf,SAA1C;AAAqD,MAAA,QAAQ,EAAE,KAA/D;AAAsE,MAAA,OAAO,EAAED,UAA/E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACK,CAAC;AAAC0D,MAAAA,YAAD;AAAeC,MAAAA;AAAf,KAAD,KACG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,6CAASD,YAAY,EAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QACE,+CAAWC,aAAa,EAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OADF,EAEE,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,oBAAC,IAAD;AAAM,MAAA,IAAI,EAAC,QAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,qBAFF,CADF,CAFR,CADA,EAaCpC,MAAM,KAAK,IAAX,GACG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,oBAAC,SAAD;AAAW,MAAA,GAAG,EAAIA,MAAlB;AACA,MAAA,IAAI,EAAI,KAAKe,KAAL,CAAWR,IADnB;AAEA,MAAA,aAAa,EAAI,KAAKH,iBAFtB;AAGA,MAAA,UAAU,EAAI,KAAKM,oBAHnB;AAIA,MAAA,QAAQ,EAAI,KAAKJ,kBAJjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,EAOA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAPA,EAQA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BARA,EASA;AAAQ,MAAA,GAAG,EAAE,KAAKO,qBAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MATA,EAUC;AAAQ,MAAA,OAAO,EAAE,KAAKa,mBAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAVD,EAWE;AAAQ,MAAA,OAAO,EAAE,KAAKV,oBAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAXF,CADH,GAcK,EA3BN,CADF;AAmCD;;AA9J6B;;AAiKlC,eAAerC,GAAf","sourcesContent":["import React from 'react';\nimport Dropzone from 'react-dropzone';\nimport ReactCrop from 'react-image-crop';\nimport 'react-image-crop/dist/ReactCrop.css';\nimport {image64toCanvasRef, extractImageFileExtensionFromBase64, downloadBase64File, base64StringtoFile, makeClientCrop} from './ResuableUtils';\nimport { Upload, message, Button, Icon } from 'antd';\n\nconst imgMaxSize = 100000000//bytes;\nconst FileTypes = ['image/x-png', 'image/png', 'image/jpg', 'image/jpeg', 'image/gif']\nclass App extends React.Component {\n  //const {acceptedFiles, getRootProps, getInputProps} = useDropzone();\n  constructor(props) {\n    super(props)\n    this.imagePreviewCanvasRef = React.createRef();\n    //this.fileInputRef = React.createRef()\n    this.state = {\n        imgSrc: null,\n        croppedImageURL: null, \n        crop: {\n            unit: 'px',\n            height: 755,\n            width: 450\n            \n        } \n    }\n  }\n    \n    \n    alertFile = (files) => {\n        if(files && files.length>0){\n            const currentFile = files[0];\n            const currentFileSize = currentFile.size;\n            const currentFileType = currentFile.type;\n            if(currentFileSize > imgMaxSize){\n                alert(\"This file is too big\");\n                return false;\n            }\n            if(!FileTypes.includes(currentFileType)){\n                alert(\"This file type is not supported\");\n                return false;\n            }\n            return true;\n        }\n\n    };\n\n    onDropFn = (files, rejectedFiles) => {\n        //console.log(files);\n        if(rejectedFiles && rejectedFiles.length > 0){\n           this.alertFile(rejectedFiles);\n        }\n        if(files && files.length>0 ){\n            const isVerified = this.alertFile(files)\n            if(isVerified) {\n                const currentFile = files[0]\n                const reader = new FileReader()\n                reader.addEventListener(\"load\", () => {\n                    this.setState({\n                        imgSrc: reader.result,\n                        imgSrcExt:  extractImageFileExtensionFromBase64(reader.result)\n                    })\n\n                }, false)\n\n                reader.readAsDataURL(currentFile)\n            }\n\n\n        }\n    };\n    \n\n    handleImageLoaded = (image) => {\n        //console.log(image)\n        //this.imageRef = image;\n    };\n    handleOnCropChange = (crop) => {\n        console.log(crop)\n        this.setState({crop:crop})\n        //console.log(this.state)\n    };\n    handleOnCropComplete = (crop, pixelCrop) => {\n        \n        const canvasRef = this.imagePreviewCanvasRef.current;\n        console.log(canvasRef);\n        const {imgSrc} = this.state;\n        image64toCanvasRef(canvasRef, imgSrc, crop);\n    };\n\n    handleClearToDefault = (event) =>{\n        if (event) event.preventDefault()\n        const canvas = this.imagePreviewCanvasRef.current\n        const ctx = canvas.getContext('2d');\n        console.log(canvas);\n        ctx.clearRect(0, 0, canvas.width, canvas.height)\n\n        this.setState({\n            imgSrc: null,\n            imgSrcExt: null,\n            crop: {\n                aspect: 1/1\n            }\n\n        })\n        //this.fileInputRef.current.value = null\n    };\n\n    handleDownloadClick = (event) => {\n        event.preventDefault()\n        const {imgSrc}  = this.state\n        if (imgSrc) {\n            const canvasRef = this.imagePreviewCanvasRef.current\n        \n            const {imgSrcExt} =  this.state\n            const imageData64 = canvasRef.toDataURL('image/' + imgSrcExt)\n\n      \n            const myFilename = \"previewFile.\" + imgSrcExt\n\n            // file to be uploaded\n            const myNewCroppedFile = base64StringtoFile(imageData64, myFilename)\n            console.log(myNewCroppedFile)\n            // download file\n            downloadBase64File(imageData64, myFilename)\n            //this.handleClearToDefault()\n        }\n    }\n\n    \n\nrender(){\n    const {imgSrc, croppedImageURL} = this.state\n      return (\n        <div>\n        <Dropzone  onDrop={this.onDropFn} accept={FileTypes} multiple={false} maxSize={imgMaxSize}>\n            {({getRootProps, getInputProps}) => (\n                <section>\n                  <div {...getRootProps()}>\n                    <input {...getInputProps()} />\n                    <Button>\n                        <Icon type=\"upload\" /> Click to Upload\n                    </Button>\n                  </div>\n                </section>\n            )}\n        </Dropzone>\n        {imgSrc !== null ? \n            <div> \n                <ReactCrop src = {imgSrc} \n                crop = {this.state.crop} \n                onImageLoaded = {this.handleImageLoaded}\n                onComplete = {this.handleOnCropComplete}\n                onChange = {this.handleOnCropChange}/>\n            \n            <br/>\n            <p> Preview Canvas Crop </p>\n            <canvas ref={this.imagePreviewCanvasRef}></canvas>\n             <button onClick={this.handleDownloadClick}>Download</button>\n              <button onClick={this.handleClearToDefault}>Clear</button>\n            </div>\n            : \"\"}\n        \n            {/* croppedImageURL &&  <img alt=\"Cropped Image\" style={{maxWidth: '100%'}} src={croppedImageURL} /> */}\n        \n        </div>\n        \n      );\n    }\n}\n\nexport default App;\n\n"]},"metadata":{},"sourceType":"module"}