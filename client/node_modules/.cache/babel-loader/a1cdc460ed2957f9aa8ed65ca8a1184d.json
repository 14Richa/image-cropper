{"ast":null,"code":"var _jsxFileName = \"/home/alvis/Desktop/image-cropper/client/src/App.js\";\nimport React, { Component } from 'react'; //import Resizer from 'react-image-file-resizer';\n\nimport ImageUploader from 'react-images-upload';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      pictures: []\n    };\n    this.onDrop = this.onDrop.bind(this);\n  }\n\n  callAPI() {\n    fetch(\"http://localhost:9000/testAPI\").then(res => res.text()).then(res => this.setState({\n      apiResponse: res\n    }));\n  }\n\n  componentWillMount() {\n    this.callAPI();\n  }\n\n  onDrop(picture) {\n    var width, height;\n    var img = document.createElement(\"img\");\n\n    img.onload = function () {\n      // `naturalWidth`/`naturalHeight` aren't supported on <IE9. Fallback to normal width/height\n      // The natural size is the actual image size regardless of rendering.\n      // The 'normal' width/height are for the **rendered** size.\n      width = img.naturalWidth || img.width;\n      height = img.naturalHeight || img.height;\n      console.log(height); // Do something with the width and height\n    }; // Setting the source makes it start downloading and eventually call `onload`\n\n\n    img.src = picture[0];\n    console.log(picture[0]);\n    this.setState({\n      pictures: this.state.pictures.concat(picture)\n    });\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51\n      },\n      __self: this\n    }, React.createElement(ImageUploader, {\n      withIcon: true,\n      buttonText: \"Choose images\",\n      onChange: this.onDrop,\n      imgExtension: ['.jpg', '.gif', '.png', '.gif'],\n      maxFileSize: 5242880,\n      minFileSize: 1204,\n      withPreview: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default App; // class App extends React.Component {\n//     constructor(props) {\n//         super(props);\n//         this.fileChangedHandler = this.fileChangedHandler.bind(this);\n//         this.state = {img: null};\n//     }\n//     fileChangedHandler(event) {\n//         var fileInput = false\n//         if(event.target.files[0]) {\n//             fileInput = true\n//         }\n//         if(fileInput) {\n//             Resizer.imageFileResizer(\n//                 event.target.files[0],\n//                 1204,\n//                 1204,\n//                 'JPG',\n//                 100,\n//                 0,\n//                 uri => {\n//                     this.setState({image: uri});\n//                     console.log(this.state);\n//                 },\n//                 'base64'\n//             );\n//         }\n//     }\n//     render() {\n//         return (\n//             <div className=\"App\">\n//                 <input  type=\"file\" onChange={this.fileChangedHandler}/>\n//                 <img src={this.state.image} />\n//                 <p> \"Hello\" </p>\n//                 <p> {console.log(this.state.image)}</p>\n//             </div>\n//         );\n//     }\n// }\n//export default App;","map":{"version":3,"sources":["/home/alvis/Desktop/image-cropper/client/src/App.js"],"names":["React","Component","ImageUploader","App","constructor","props","state","pictures","onDrop","bind","callAPI","fetch","then","res","text","setState","apiResponse","componentWillMount","picture","width","height","img","document","createElement","onload","naturalWidth","naturalHeight","console","log","src","concat","render"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC,C,CACA;;AACA,OAAOC,aAAP,MAA0B,qBAA1B;;AAEA,MAAMC,GAAN,SAAkBH,KAAK,CAACC,SAAxB,CAAkC;AAE9BG,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;AACC,SAAKC,KAAL,GAAa;AAAEC,MAAAA,QAAQ,EAAE;AAAZ,KAAb;AACA,SAAKC,MAAL,GAAc,KAAKA,MAAL,CAAYC,IAAZ,CAAiB,IAAjB,CAAd;AACJ;;AAEDC,EAAAA,OAAO,GAAG;AACVC,IAAAA,KAAK,CAAC,+BAAD,CAAL,CACKC,IADL,CACUC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EADjB,EAEKF,IAFL,CAEUC,GAAG,IAAI,KAAKE,QAAL,CAAc;AAAEC,MAAAA,WAAW,EAAEH;AAAf,KAAd,CAFjB;AAGH;;AAEDI,EAAAA,kBAAkB,GAAG;AACjB,SAAKP,OAAL;AACH;;AAEGF,EAAAA,MAAM,CAACU,OAAD,EAAU;AAEpB,QAAIC,KAAJ,EAAWC,MAAX;AAEA,QAAIC,GAAG,GAAGC,QAAQ,CAACC,aAAT,CAAuB,KAAvB,CAAV;;AACAF,IAAAA,GAAG,CAACG,MAAJ,GAAa,YAAW;AACpB;AACA;AACA;AAEAL,MAAAA,KAAK,GAAIE,GAAG,CAACI,YAAJ,IAAqBJ,GAAG,CAACF,KAAlC;AACAC,MAAAA,MAAM,GAAGC,GAAG,CAACK,aAAJ,IAAqBL,GAAG,CAACD,MAAlC;AACAO,MAAAA,OAAO,CAACC,GAAR,CAAYR,MAAZ,EAPoB,CAQpB;AACH,KATD,CALoB,CAgBpB;;;AACAC,IAAAA,GAAG,CAACQ,GAAJ,GAAUX,OAAO,CAAC,CAAD,CAAjB;AAGQS,IAAAA,OAAO,CAACC,GAAR,CAAYV,OAAO,CAAC,CAAD,CAAnB;AACA,SAAKH,QAAL,CAAc;AACVR,MAAAA,QAAQ,EAAE,KAAKD,KAAL,CAAWC,QAAX,CAAoBuB,MAApB,CAA2BZ,OAA3B;AADA,KAAd;AAGH;;AAEDa,EAAAA,MAAM,GAAG;AACL,WACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,aAAD;AACI,MAAA,QAAQ,EAAE,IADd;AAEI,MAAA,UAAU,EAAC,eAFf;AAGI,MAAA,QAAQ,EAAE,KAAKvB,MAHnB;AAII,MAAA,YAAY,EAAE,CAAC,MAAD,EAAS,MAAT,EAAiB,MAAjB,EAAyB,MAAzB,CAJlB;AAKI,MAAA,WAAW,EAAE,OALjB;AAMI,MAAA,WAAW,EAAE,IANjB;AAOI,MAAA,WAAW,EAAI,IAPnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CADF;AAcH;;AA3D6B;;AA8DlC,eAAeL,GAAf,C,CAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA","sourcesContent":["import React, { Component } from 'react';\n//import Resizer from 'react-image-file-resizer';\nimport ImageUploader from 'react-images-upload';\n\nclass App extends React.Component {\n \n    constructor(props) {\n        super(props);\n         this.state = { pictures: [] };\n         this.onDrop = this.onDrop.bind(this);\n    }\n\n    callAPI() {\n    fetch(\"http://localhost:9000/testAPI\")\n        .then(res => res.text())\n        .then(res => this.setState({ apiResponse: res }));\n}\n\ncomponentWillMount() {\n    this.callAPI();\n}\n\n    onDrop(picture) {\n\nvar width, height;\n\nvar img = document.createElement(\"img\");\nimg.onload = function() {\n    // `naturalWidth`/`naturalHeight` aren't supported on <IE9. Fallback to normal width/height\n    // The natural size is the actual image size regardless of rendering.\n    // The 'normal' width/height are for the **rendered** size.\n\n    width  = img.naturalWidth  || img.width;\n    height = img.naturalHeight || img.height; \n    console.log(height);\n    // Do something with the width and height\n}\n\n// Setting the source makes it start downloading and eventually call `onload`\nimg.src = picture[0];\n\n\n        console.log(picture[0]);\n        this.setState({\n            pictures: this.state.pictures.concat(picture),\n        });\n    }\n \n    render() {\n        return (\n          <div>\n            <ImageUploader\n                withIcon={true}\n                buttonText='Choose images'\n                onChange={this.onDrop}\n                imgExtension={['.jpg', '.gif', '.png', '.gif']}\n                maxFileSize={5242880}\n                minFileSize={1204}\n                withPreview = {true}\n            />\n           </div>\n\n        );\n    }\n}\n\nexport default App;\n\n// class App extends React.Component {\n//     constructor(props) {\n//         super(props);\n//         this.fileChangedHandler = this.fileChangedHandler.bind(this);\n//         this.state = {img: null};\n//     }\n \n//     fileChangedHandler(event) {\n//         var fileInput = false\n//         if(event.target.files[0]) {\n//             fileInput = true\n//         }\n//         if(fileInput) {\n//             Resizer.imageFileResizer(\n//                 event.target.files[0],\n//                 1204,\n//                 1204,\n//                 'JPG',\n//                 100,\n//                 0,\n//                 uri => {\n//                     this.setState({image: uri});\n//                     console.log(this.state);\n//                 },\n//                 'base64'\n//             );\n//         }\n//     }\n \n//     render() {\n//         return (\n//             <div className=\"App\">\n//                 <input  type=\"file\" onChange={this.fileChangedHandler}/>\n//                 <img src={this.state.image} />\n//                 <p> \"Hello\" </p>\n//                 <p> {console.log(this.state.image)}</p>\n//             </div>\n//         );\n//     }\n// }\n \n//export default App;\n\n"]},"metadata":{},"sourceType":"module"}