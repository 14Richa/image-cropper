{"ast":null,"code":"var _jsxFileName = \"/home/alvis/Desktop/image-cropper/client/src/App.js\";\nimport React from 'react';\nimport Dropzone from 'react-dropzone';\nimport ReactCrop from 'react-image-crop';\nimport 'react-image-crop/dist/ReactCrop.css';\nimport { image64toCanvasRef, extractImageFileExtensionFromBase64, downloadBase64File, base64StringtoFile, makeClientCrop } from './ResuableUtils';\nconst imgMaxSize = 100000000; //bytes;\n\nconst FileTypes = ['image/x-png', 'image/png', 'image/jpg', 'image/jpeg', 'image/gif'];\n\nclass App extends React.Component {\n  //const {acceptedFiles, getRootProps, getInputProps} = useDropzone();\n  constructor(props) {\n    super(props);\n\n    this.alertFile = files => {\n      if (files && files.length > 0) {\n        const currentFile = files[0];\n        const currentFileSize = currentFile.size;\n        const currentFileType = currentFile.type;\n\n        if (currentFileSize > imgMaxSize) {\n          alert(\"This file is too big\");\n          return false;\n        }\n\n        if (!FileTypes.includes(currentFileType)) {\n          alert(\"This file type is not supported\");\n          return false;\n        }\n\n        return true;\n      }\n    };\n\n    this.onDropFn = (files, rejectedFiles) => {\n      //console.log(files);\n      if (rejectedFiles && rejectedFiles.length > 0) {\n        this.alertFile(rejectedFiles);\n      }\n\n      if (files && files.length > 0) {\n        const isVerified = this.alertFile(files);\n\n        if (isVerified) {\n          const currentFile = files[0];\n          const reader = new FileReader();\n          reader.addEventListener(\"load\", () => {\n            this.setState({\n              imgSrc: reader.result\n            });\n          }, false);\n          reader.readAsDataURL(currentFile);\n        }\n      }\n    };\n\n    this.handleImageLoaded = image => {\n      //console.log(image)\n      this.imageRef = image;\n    };\n\n    this.handleOnCropChange = crop => {\n      //console.log(crop)\n      this.setState({\n        crop: crop\n      }); //console.log(this.state)\n    };\n\n    this.handleOnCropComplete = crop => {\n      const croppedImageURL = makeClientCrop(this.imageRef, crop);\n      console.log(croppedImageURL);\n      this.setState({\n        croppedImageURL: croppedImageURL\n      });\n      console.log(this.state);\n    };\n\n    this.handleOnDownloadClick = event => {\n      event.preventDefault();\n      const canvasRef = this.imagePreviewCanvasRef.current;\n      const imgSrc = this.state.imgSrc;\n      const fileExtension = extractImageFileExtensionFromBase64(imgSrc);\n      const myFilename = \"previewFile.\" + fileExtension;\n      const myNewCropperFile = base64StringtoFile(imgSrc); //console.log(myNewCropperFile)\n      // to download file \n\n      downloadBase64File(imgSrc, myFilename);\n    };\n\n    this.imagePreviewCanvasRef = React.createRef();\n    this.state = {\n      imgSrc: null,\n      croppedImageURL: null,\n      crop: {\n        height: 755,\n        width: 450\n      }\n    };\n  }\n\n  render() {\n    const _this$state = this.state,\n          imgSrc = _this$state.imgSrc,\n          croppedImageURL = _this$state.croppedImageURL;\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104\n      },\n      __self: this\n    }, React.createElement(Dropzone, {\n      onDrop: this.onDropFn,\n      accept: FileTypes,\n      multiple: false,\n      maxSize: imgMaxSize,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105\n      },\n      __self: this\n    }, ({\n      getRootProps,\n      getInputProps\n    }) => React.createElement(\"section\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107\n      },\n      __self: this\n    }, React.createElement(\"div\", Object.assign({}, getRootProps(), {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108\n      },\n      __self: this\n    }), React.createElement(\"input\", Object.assign({}, getInputProps(), {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109\n      },\n      __self: this\n    })), React.createElement(\"button\", {\n      style: {\n        marginTop: \"140px\",\n        marginLeft: \"740px\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110\n      },\n      __self: this\n    }, \" Click here to select a file\"))))), imgSrc !== null ? React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116\n      },\n      __self: this\n    }, React.createElement(ReactCrop, {\n      src: imgSrc,\n      crop: this.state.crop,\n      onImageLoaded: this.handleImageLoaded,\n      onComplete: this.handleOnCropComplete,\n      onChange: this.handleOnCropChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117\n      },\n      __self: this\n    })) : \"\", croppedImageURL && React.createElement(\"img\", {\n      alt: \"Cropped Image\",\n      style: {\n        maxWidth: '100%'\n      },\n      src: croppedImageURL,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/home/alvis/Desktop/image-cropper/client/src/App.js"],"names":["React","Dropzone","ReactCrop","image64toCanvasRef","extractImageFileExtensionFromBase64","downloadBase64File","base64StringtoFile","makeClientCrop","imgMaxSize","FileTypes","App","Component","constructor","props","alertFile","files","length","currentFile","currentFileSize","size","currentFileType","type","alert","includes","onDropFn","rejectedFiles","isVerified","reader","FileReader","addEventListener","setState","imgSrc","result","readAsDataURL","handleImageLoaded","image","imageRef","handleOnCropChange","crop","handleOnCropComplete","croppedImageURL","console","log","state","handleOnDownloadClick","event","preventDefault","canvasRef","imagePreviewCanvasRef","current","fileExtension","myFilename","myNewCropperFile","createRef","height","width","render","getRootProps","getInputProps","marginTop","marginLeft","maxWidth"],"mappings":"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","sourcesContent":["import React from 'react';\nimport Dropzone from 'react-dropzone';\nimport ReactCrop from 'react-image-crop';\nimport 'react-image-crop/dist/ReactCrop.css';\nimport {image64toCanvasRef, extractImageFileExtensionFromBase64, downloadBase64File, base64StringtoFile, makeClientCrop} from './ResuableUtils';\n\n\nconst imgMaxSize = 100000000//bytes;\nconst FileTypes = ['image/x-png', 'image/png', 'image/jpg', 'image/jpeg', 'image/gif']\nclass App extends React.Component {\n  //const {acceptedFiles, getRootProps, getInputProps} = useDropzone();\n  constructor(props) {\n    super(props)\n    this.imagePreviewCanvasRef = React.createRef()\n    this.state = {\n        imgSrc: null,\n        croppedImageURL: null, \n        crop: {\n            height: 755,\n            width: 450\n            \n        } \n    }\n  }\n  \n\n    alertFile = (files) => {\n        if(files && files.length>0){\n            const currentFile = files[0];\n            const currentFileSize = currentFile.size;\n            const currentFileType = currentFile.type;\n            if(currentFileSize > imgMaxSize){\n                alert(\"This file is too big\");\n                return false;\n            }\n            if(!FileTypes.includes(currentFileType)){\n                alert(\"This file type is not supported\");\n                return false;\n            }\n            return true;\n        }\n\n    };\n\n    onDropFn = (files, rejectedFiles) => {\n        //console.log(files);\n        if(rejectedFiles && rejectedFiles.length > 0){\n           this.alertFile(rejectedFiles);\n        }\n        if(files && files.length>0 ){\n            const isVerified = this.alertFile(files)\n            if(isVerified) {\n                const currentFile = files[0]\n                const reader = new FileReader()\n                reader.addEventListener(\"load\", () => {\n                    this.setState({\n                        imgSrc: reader.result\n                    })\n\n                }, false)\n\n                reader.readAsDataURL(currentFile)\n            }\n\n\n        }\n    }\n    \n\n    handleImageLoaded = (image) => {\n        //console.log(image)\n        this.imageRef = image;\n    }\n    handleOnCropChange = (crop) => {\n        //console.log(crop)\n        this.setState({crop:crop})\n        //console.log(this.state)\n    }\n    handleOnCropComplete = (crop) => {\n        const croppedImageURL = makeClientCrop(this.imageRef, crop);\n        console.log(croppedImageURL);\n        this.setState({croppedImageURL: croppedImageURL});\n        console.log(this.state);\n    }\n\n    handleOnDownloadClick = (event) => {\n        event.preventDefault()\n        const canvasRef = this.imagePreviewCanvasRef.current\n        const imgSrc = this.state.imgSrc;\n        const fileExtension = extractImageFileExtensionFromBase64(imgSrc)\n        const myFilename = \"previewFile.\" + fileExtension\n\n        const myNewCropperFile = base64StringtoFile(imgSrc)\n        //console.log(myNewCropperFile)\n\n        // to download file \n\n        downloadBase64File(imgSrc, myFilename)\n    }\n\nrender(){\n    const {imgSrc, croppedImageURL} = this.state\n      return (\n        <div>\n        <Dropzone  onDrop={this.onDropFn} accept={FileTypes} multiple={false} maxSize={imgMaxSize}>\n            {({getRootProps, getInputProps}) => (\n                <section>\n                  <div {...getRootProps()}>\n                    <input {...getInputProps()} />\n                    <button style = {{marginTop: \"140px\", marginLeft: \"740px\"}} ><p> Click here to select a file</p></button>\n                  </div>\n                </section>\n            )}\n        </Dropzone>\n        {imgSrc !== null ? \n            <div> \n                <ReactCrop src = {imgSrc} \n                crop = {this.state.crop} \n                onImageLoaded = {this.handleImageLoaded}\n                onComplete = {this.handleOnCropComplete}\n                onChange = {this.handleOnCropChange}/>\n            </div>\n            : \"\"}\n        \n            { croppedImageURL &&  <img alt=\"Cropped Image\" style={{maxWidth: '100%'}} src={croppedImageURL} /> }\n        \n        </div>\n        \n      );\n    }\n}\n\nexport default App;\n\n"]},"metadata":{},"sourceType":"module"}