{"ast":null,"code":"var _jsxFileName = \"/home/alvis/Desktop/image-cropper/client/src/App.js\";\nimport React from 'react';\nimport Dropzone from 'react-dropzone';\nimport ReactCrop from 'react-image-crop';\nimport 'react-image-crop/dist/ReactCrop.css';\nimport { image64toCanvasRef, extractImageFileExtensionFromBase64, downloadBase64File, base64StringtoFile, makeClientCrop } from './ResuableUtils';\nimport { Upload, message, Icon, PageHeader, Tabs, Button, Statistic, Descriptions } from 'antd';\nimport { Menu, Dropdown, Row, Col } from 'antd';\nimport 'antd/dist/antd.css'; //const imgMaxSize = 100000000//bytes;\n\nconst FileTypes = ['image/x-png', 'image/png', 'image/jpg', 'image/jpeg', 'image/gif'];\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.onDropFn = info => {\n      let fileList = [];\n      console.log(info);\n\n      if (info.file.status === 'uploading') {\n        //Reduce the file to the latest one.\n        fileList = [...info.fileList];\n        fileList = fileList.slice(-1);\n        const currentFile = fileList[0].originFileObj;\n        const currentFileType = currentFile.type;\n\n        if (FileTypes.includes(currentFileType)) {\n          const reader = new FileReader();\n          reader.addEventListener(\"load\", () => {\n            let image = new Image();\n            image.src = reader.result;\n\n            image.onload = () => {\n              if (image.width !== 1024 || image.height !== 1024) {\n                message.error(`Image is ${image.height} x ${image.width}. Please upload 1024 x 1024 image`);\n                fileList = [];\n              } else {\n                message.success(`${info.file.name} file uploaded successfully`);\n                fileList = fileList.map(file => {\n                  if (file.response) {\n                    file.url = file.response.url;\n                  }\n\n                  return file;\n                });\n                this.setState({\n                  imgSrc: reader.result,\n                  imgSrcExt: extractImageFileExtensionFromBase64(reader.result),\n                  fileList: fileList\n                });\n              }\n            };\n          }, false);\n          reader.readAsDataURL(currentFile);\n        } else {\n          message.error(\"File Type not supportedgit \");\n        }\n      } else if (info.file.status === 'error') {\n        message.error(`${info.file.name} file upload failed.`);\n        this.setState({\n          fileList: []\n        });\n      }\n    };\n\n    this.OnImageLoad = image => {\n      //console.log(image)\n      this.imageRef = image;\n    };\n\n    this.OnCropChange = crop => {\n      console.log(\"Crop inside Cropchange \", crop);\n      this.setState({\n        crop: crop\n      }); //console.log(this.state)\n    };\n\n    this.handleOnCropComplete = (crop, pixelCrop) => {\n      console.log(\"Crop inside Cropcomplete\", crop);\n      const canvasRef = this.imagePreviewCanvasRef.current; //console.log(canvasRef);\n\n      const imgSrc = this.state.imgSrc;\n      console.log(\"CanvasRef\", canvasRef);\n      if (this.imageRef) image64toCanvasRef(canvasRef, imgSrc, crop, this.imageRef);\n    };\n\n    this.handleClearToDefault = event => {\n      //if (event) event.preventDefault()\n      const canvas = this.imagePreviewCanvasRef.current;\n      const ctx = canvas.getContext('2d');\n      console.log(canvas);\n      ctx.clearRect(0, 0, canvas.width, canvas.height);\n      this.setState({\n        imgSrc: null,\n        imgSrcExt: null\n      });\n    };\n\n    this.changeCrop = ({\n      key\n    }) => {\n      //message.info(`Click on item ${key}`);\n      let h, w;\n\n      switch (key) {\n        case \"1\":\n          h = 755;\n          w = 450;\n          break;\n\n        case \"2\":\n          h = 365;\n          w = 450;\n          break;\n\n        case \"3\":\n          h = 365;\n          w = 212;\n          break;\n\n        case \"4\":\n          h = 380;\n          w = 380;\n          break;\n\n        default:\n          h = 0;\n          w = 0;\n      }\n\n      this.setState({\n        crop: {\n          x: 0,\n          y: 0,\n          unit: \"px\",\n          height: h,\n          width: w\n        }\n      });\n      this.handleOnCropComplete({\n        unit: \"px\",\n        height: h,\n        width: w\n      });\n    };\n\n    this.menu = React.createElement(Menu, {\n      onClick: this.changeCrop,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 162\n      },\n      __self: this\n    }, React.createElement(Menu.Item, {\n      key: \"1\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 163\n      },\n      __self: this\n    }, \"755 x 450\"), React.createElement(Menu.Item, {\n      key: \"2\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 164\n      },\n      __self: this\n    }, \"365 x 450\"), React.createElement(Menu.Item, {\n      key: \"3\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 165\n      },\n      __self: this\n    }, \"365 x 212 \"), React.createElement(Menu.Item, {\n      key: \"4\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 166\n      },\n      __self: this\n    }, \"380 x 380 \"), React.createElement(Menu.Item, {\n      key: \"5\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 167\n      },\n      __self: this\n    }, \"Custom\"));\n\n    this.handleDownloadClick = event => {\n      event.preventDefault();\n      const imgSrc = this.state.imgSrc;\n\n      if (imgSrc) {\n        const canvasRef = this.imagePreviewCanvasRef.current;\n        const imgSrcExt = this.state.imgSrcExt;\n        const imageData64 = canvasRef.toDataURL('image/' + imgSrcExt);\n        const myFilename = \"previewFile.\" + imgSrcExt; // file to be uploaded\n\n        const myNewCroppedFile = base64StringtoFile(imageData64, myFilename);\n        console.log(myNewCroppedFile); // download file\n\n        downloadBase64File(imageData64, myFilename);\n        this.handleClearToDefault();\n      }\n    };\n\n    this.imagePreviewCanvasRef = React.createRef();\n    this.state = {\n      imgSrc: null,\n      croppedImageURL: null,\n      fileList: [],\n      crop: {\n        unit: 'px',\n        height: 755,\n        width: 450,\n        zoom: 1\n      }\n    };\n  }\n\n  render() {\n    const _this$state = this.state,\n          imgSrc = _this$state.imgSrc,\n          croppedImageURL = _this$state.croppedImageURL,\n          fileList = _this$state.fileList;\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 192\n      },\n      __self: this\n    }, React.createElement(PageHeader, {\n      style: {\n        border: '1px solid rgb(235, 237, 240)'\n      },\n      title: \"Image Cropper\",\n      subTitle: \"Small utility to crop images and store them locally\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 193\n      },\n      __self: this\n    }, React.createElement(Descriptions, {\n      size: \"small\",\n      column: 2,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 198\n      },\n      __self: this\n    }, React.createElement(Descriptions.Item, {\n      label: \"Created\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 199\n      },\n      __self: this\n    }, \"Richa Sharma\"), React.createElement(Descriptions.Item, {\n      label: \"Tech\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 200\n      },\n      __self: this\n    }, \" \", React.createElement(\"a\", {\n      href: \"https://reactjs.org/\",\n      target: \"_blank\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 200\n      },\n      __self: this\n    }, \"ReactJS\"), \" and \", React.createElement(\"a\", {\n      href: \"https://ant.design/docs/react/introduce\",\n      target: \"_blank\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 200\n      },\n      __self: this\n    }, \"Ant design \")), React.createElement(Descriptions.Item, {\n      label: \"Remarks\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 201\n      },\n      __self: this\n    }, \"Upload an image and choose the size you wish to crop to. You can choose pre-determined blocks or can do custom crop as well. It accepts images of size 1024x1024 only.\")), React.createElement(Row, {\n      style: {\n        padding: '20px 50px'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 206\n      },\n      __self: this\n    }, React.createElement(Col, {\n      span: 4,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 207\n      },\n      __self: this\n    }, React.createElement(Upload, {\n      fileList: [],\n      onChange: this.onDropFn,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 208\n      },\n      __self: this\n    }, React.createElement(Button, {\n      disabled: imgSrc,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 209\n      },\n      __self: this\n    }, React.createElement(Icon, {\n      type: \"upload\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 210\n      },\n      __self: this\n    }), \" Click to Upload\"))), React.createElement(Col, {\n      span: 8,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 214\n      },\n      __self: this\n    }, React.createElement(Dropdown.Button, {\n      overlay: this.menu,\n      disabled: !imgSrc,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 215\n      },\n      __self: this\n    }, React.createElement(\"a\", {\n      className: \"ant-dropdown-link\",\n      href: \"#\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 216\n      },\n      __self: this\n    }, \"Select the crop size\"))), React.createElement(Col, {\n      span: 2,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 219\n      },\n      __self: this\n    }, React.createElement(Button, {\n      disabled: !imgSrc,\n      onClick: this.handleDownloadClick,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 220\n      },\n      __self: this\n    }, \"Download\")), React.createElement(Col, {\n      span: 6,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 222\n      },\n      __self: this\n    }, React.createElement(Button, {\n      disabled: !imgSrc,\n      onClick: this.handleClearToDefault,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 223\n      },\n      __self: this\n    }, \"Clear\")))), imgSrc !== null ? React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 230\n      },\n      __self: this\n    }, React.createElement(Row, {\n      style: {\n        padding: '20px 20px'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 231\n      },\n      __self: this\n    }, React.createElement(Col, {\n      span: 12,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 232\n      },\n      __self: this\n    }, React.createElement(ReactCrop, {\n      src: imgSrc,\n      crop: this.state.crop,\n      onImageLoaded: this.OnImageLoad,\n      onComplete: this.handleOnCropComplete,\n      onChange: this.OnCropChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 233\n      },\n      __self: this\n    })), React.createElement(Col, {\n      span: 4,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 239\n      },\n      __self: this\n    }), React.createElement(Col, {\n      span: 8,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 241\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 242\n      },\n      __self: this\n    }, \" Preview Crop \"), React.createElement(\"canvas\", {\n      ref: this.imagePreviewCanvasRef,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 243\n      },\n      __self: this\n    })))) : \"\");\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/home/alvis/Desktop/image-cropper/client/src/App.js"],"names":["React","Dropzone","ReactCrop","image64toCanvasRef","extractImageFileExtensionFromBase64","downloadBase64File","base64StringtoFile","makeClientCrop","Upload","message","Icon","PageHeader","Tabs","Button","Statistic","Descriptions","Menu","Dropdown","Row","Col","FileTypes","App","Component","constructor","props","onDropFn","info","fileList","console","log","file","status","slice","currentFile","originFileObj","currentFileType","type","includes","reader","FileReader","addEventListener","image","Image","src","result","onload","width","height","error","success","name","map","response","url","setState","imgSrc","imgSrcExt","readAsDataURL","OnImageLoad","imageRef","OnCropChange","crop","handleOnCropComplete","pixelCrop","canvasRef","imagePreviewCanvasRef","current","state","handleClearToDefault","event","canvas","ctx","getContext","clearRect","changeCrop","key","h","w","x","y","unit","menu","handleDownloadClick","preventDefault","imageData64","toDataURL","myFilename","myNewCroppedFile","createRef","croppedImageURL","zoom","render","border","padding"],"mappings":"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","sourcesContent":["import React from 'react';\nimport Dropzone from 'react-dropzone';\nimport ReactCrop from 'react-image-crop';\nimport 'react-image-crop/dist/ReactCrop.css';\nimport {image64toCanvasRef, extractImageFileExtensionFromBase64, downloadBase64File, base64StringtoFile, makeClientCrop} from './ResuableUtils';\nimport { Upload, message, Icon, PageHeader, Tabs, Button, Statistic, Descriptions } from 'antd';\nimport { Menu, Dropdown, Row, Col } from 'antd';\nimport 'antd/dist/antd.css'\n//const imgMaxSize = 100000000//bytes;\nconst FileTypes = ['image/x-png', 'image/png', 'image/jpg', 'image/jpeg', 'image/gif']\n\n\n\nclass App extends React.Component {\n\nconstructor(props) {\n    super(props)\n    this.imagePreviewCanvasRef = React.createRef();\n    this.state = {\n        imgSrc: null,\n        croppedImageURL: null,\n        fileList: [], \n        crop: {\n            unit: 'px',\n            height: 755,\n            width: 450,\n            zoom: 1,\n            \n        } \n    }\n}\n    \n\nonDropFn = (info) => {\n    let fileList = [];\n    console.log(info);\n    if (info.file.status === 'uploading' ) {\n\n        //Reduce the file to the latest one.\n        fileList = [...info.fileList];\n        fileList = fileList.slice(-1);\n        const currentFile = fileList[0].originFileObj;\n        const currentFileType = currentFile.type;\n        if(FileTypes.includes(currentFileType))\n        {\n            const reader = new FileReader()\n                \n                reader.addEventListener(\"load\", () => {\n                    let image = new Image();\n                    image.src = reader.result;\n                    image.onload = () => {\n                        if(image.width !== 1024 || image.height !== 1024){\n                            message.error(`Image is ${image.height} x ${image.width}. Please upload 1024 x 1024 image`);\n                            fileList = [];\n                        }\n                        else\n                        {\n                            message.success(`${info.file.name} file uploaded successfully`);\n        \n                            fileList = fileList.map(file => {\n                                        if (file.response) {\n                                            file.url = file.response.url;\n                                          }\n                                          return file;\n                                        });\n                            \n                            this.setState({\n                            imgSrc: reader.result,\n                            imgSrcExt:  extractImageFileExtensionFromBase64(reader.result),\n                            fileList: fileList \n                            })\n                        }\n                    };\n        \n                }, false)\n                reader.readAsDataURL(currentFile);  \n        }\n        else\n        {\n            message.error(\"File Type not supportedgit \");\n        }\n    }\n    else if (info.file.status === 'error') {\n        message.error(`${info.file.name} file upload failed.`);\n        this.setState({fileList: []});\n\n    }\n};\n\n\n\nOnImageLoad = (image) => {\n        //console.log(image)\n        this.imageRef = image;\n};\nOnCropChange = (crop) => {\n        console.log(\"Crop inside Cropchange \", crop)\n        this.setState({crop:crop})\n        //console.log(this.state)\n};\n    handleOnCropComplete = (crop, pixelCrop) => {\n\n        console.log(\"Crop inside Cropcomplete\", crop);\n        \n        const canvasRef = this.imagePreviewCanvasRef.current;\n        //console.log(canvasRef);\n        const {imgSrc} = this.state;\n        console.log(\"CanvasRef\", canvasRef);\n        if(this.imageRef) image64toCanvasRef(canvasRef, imgSrc, crop, this.imageRef);\n    };\n\n    handleClearToDefault = (event) =>{\n        //if (event) event.preventDefault()\n        const canvas = this.imagePreviewCanvasRef.current\n        const ctx = canvas.getContext('2d');\n        console.log(canvas);\n        ctx.clearRect(0, 0, canvas.width, canvas.height)\n\n        this.setState({\n            imgSrc: null,\n            imgSrcExt: null\n        })\n    };\n\n    changeCrop = ({ key }) => {\n    //message.info(`Click on item ${key}`);\n    let h,w;\n    switch(key) {\n        case \"1\":\n        h = 755; w= 450;\n        break;\n        case \"2\":\n        h = 365; w= 450;\n        break;\n        case \"3\":\n        h = 365; w= 212;\n        break;\n        case \"4\":\n        h = 380; w= 380;\n        break;\n        default:\n        h=0; w=0;\n    }\n    this.setState({\n        crop: {\n            x:0,\n            y:0,\n            unit: \"px\",\n            height: h,\n            width: w\n        }\n    })\n    this.handleOnCropComplete({\n            unit: \"px\",\n            height: h,\n            width: w\n        });\n\n    }\n\n    menu = (\n    <Menu onClick={this.changeCrop}>\n    <Menu.Item key=\"1\">755 x 450</Menu.Item>\n    <Menu.Item key=\"2\">365 x 450</Menu.Item>\n    <Menu.Item key=\"3\">365 x 212 </Menu.Item>\n    <Menu.Item key=\"4\">380 x 380 </Menu.Item>\n    <Menu.Item key=\"5\">Custom</Menu.Item>\n    </Menu>\n    );\n\n    handleDownloadClick = (event) => {\n        event.preventDefault()\n        const {imgSrc}  = this.state\n        if (imgSrc) {\n            const canvasRef = this.imagePreviewCanvasRef.current        \n            const {imgSrcExt} =  this.state\n            const imageData64 = canvasRef.toDataURL('image/' + imgSrcExt)\n            const myFilename = \"previewFile.\" + imgSrcExt\n\n            // file to be uploaded\n            const myNewCroppedFile = base64StringtoFile(imageData64, myFilename)\n            console.log(myNewCroppedFile)\n            // download file\n            downloadBase64File(imageData64, myFilename)\n            this.handleClearToDefault()\n        }\n    }\n\nrender(){\n    const {imgSrc, croppedImageURL, fileList} = this.state\n      return(\n        <div>\n            <PageHeader style={{border: '1px solid rgb(235, 237, 240)'}}\n                        title=\"Image Cropper\"\n                        subTitle=\"Small utility to crop images and store them locally\"\n            >\n\n            <Descriptions size=\"small\" column={2}>\n                <Descriptions.Item label=\"Created\">Richa Sharma</Descriptions.Item>\n                <Descriptions.Item label=\"Tech\"> <a href=\"https://reactjs.org/\" target = \"_blank\">ReactJS</a> and <a href=\"https://ant.design/docs/react/introduce\" target = \"_blank\">Ant design </a></Descriptions.Item>\n                <Descriptions.Item label=\"Remarks\">\n                    Upload an image and choose the size you wish to crop to. You can choose pre-determined blocks or can do custom crop as well. It accepts images of size 1024x1024 only. \n                </Descriptions.Item>\n            </Descriptions>\n\n            <Row style={{ padding: '20px 50px' }}>\n                <Col span={4}>\n                    <Upload  fileList={[]} onChange={this.onDropFn}  >\n                    <Button  disabled={imgSrc}>\n                        <Icon type=\"upload\" /> Click to Upload\n                    </Button>\n                    </Upload>  \n                </Col>\n                <Col span={8}>\n                    <Dropdown.Button overlay={this.menu} disabled={!imgSrc}>\n                        <a className=\"ant-dropdown-link\" href=\"#\">Select the crop size</a>\n                    </Dropdown.Button>\n                </Col>\n                <Col span={2}>\n                    <Button  disabled={!imgSrc} onClick={this.handleDownloadClick}>Download</Button>\n                </Col>\n                <Col span={6}>\n                    <Button   disabled={!imgSrc} onClick={this.handleClearToDefault}>Clear</Button>\n                </Col>\n            </Row>\n            </PageHeader>\n\n        {\n            imgSrc !== null ? \n            <div>\n                <Row style={{ padding: '20px 20px' }}> \n                    <Col span={12}>\n                        <ReactCrop  src = {imgSrc} \n                                    crop = {this.state.crop} \n                                    onImageLoaded = {this.OnImageLoad}\n                                    onComplete = {this.handleOnCropComplete}\n                                    onChange = {this.OnCropChange}/>\n                    </Col>\n                    <Col span={4}>\n                    </Col>\n                    <Col span={8}>\n                    <p> Preview Crop </p>\n                        <canvas ref={this.imagePreviewCanvasRef}></canvas>\n                    </Col>\n                </Row>\n            </div>\n            : \"\"\n        }        \n        </div>\n        \n      );\n    }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}