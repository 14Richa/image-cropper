{"ast":null,"code":"var _jsxFileName = \"/home/alvis/Desktop/image-cropper/client/src/App.js\";\nimport React from 'react';\nimport Dropzone from 'react-dropzone';\nconst imgMaxSize = 100000000; //bytes;\n\nconst FileTypes = ['image/x-png', 'image/png', 'image/jpg', 'image/jpeg', 'image/gif'];\n\nclass App extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    this.alertFile = files => {\n      if (files && files.length > 0) {\n        const currentFile = files[0];\n        const currentFileSize = currentFile.size;\n        const currentFileType = currentFile.type;\n\n        if (currentFileSize > imgMaxSize) {\n          alert(\"This file is too big\");\n          return false;\n        }\n      }\n    };\n\n    this.onDropFn = (files, rejectedFiles) => {\n      console.log(files);\n\n      if (rejectedFiles && rejectedFiles.length > 0) {\n        alert(\"This file is too big\");\n      }\n    };\n  }\n\n  render() {\n    return React.createElement(Dropzone, {\n      onDrop: this.onDropFn,\n      accept: FileTypes,\n      multiple: false,\n      maxSize: imgMaxSize,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 34\n      },\n      __self: this\n    }, ({\n      getRootProps,\n      getInputProps\n    }) => React.createElement(\"section\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 36\n      },\n      __self: this\n    }, React.createElement(\"div\", Object.assign({}, getRootProps(), {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37\n      },\n      __self: this\n    }), React.createElement(\"input\", Object.assign({}, getInputProps(), {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38\n      },\n      __self: this\n    })), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39\n      },\n      __self: this\n    }, \"Drag 'n' drop some files here, or click to select files\"))));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/home/alvis/Desktop/image-cropper/client/src/App.js"],"names":["React","Dropzone","imgMaxSize","FileTypes","App","Component","alertFile","files","length","currentFile","currentFileSize","size","currentFileType","type","alert","onDropFn","rejectedFiles","console","log","render","getRootProps","getInputProps"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,gBAArB;AAIA,MAAMC,UAAU,GAAG,SAAnB,C,CAA4B;;AAC5B,MAAMC,SAAS,GAAG,CAAC,aAAD,EAAgB,WAAhB,EAA6B,WAA7B,EAA0C,YAA1C,EAAwD,WAAxD,CAAlB;;AACA,MAAMC,GAAN,SAAkBJ,KAAK,CAACK,SAAxB,CAAkC;AAAA;AAAA;;AAAA,SAI9BC,SAJ8B,GAIjBC,KAAD,IAAW;AACnB,UAAGA,KAAK,IAAIA,KAAK,CAACC,MAAN,GAAa,CAAzB,EAA2B;AACvB,cAAMC,WAAW,GAAGF,KAAK,CAAC,CAAD,CAAzB;AACA,cAAMG,eAAe,GAAGD,WAAW,CAACE,IAApC;AACA,cAAMC,eAAe,GAAGH,WAAW,CAACI,IAApC;;AACA,YAAGH,eAAe,GAAGR,UAArB,EAAgC;AAC5BY,UAAAA,KAAK,CAAC,sBAAD,CAAL;AACA,iBAAO,KAAP;AACH;AACJ;AAEJ,KAf6B;;AAAA,SAiB9BC,QAjB8B,GAiBnB,CAACR,KAAD,EAAQS,aAAR,KAA0B;AACjCC,MAAAA,OAAO,CAACC,GAAR,CAAYX,KAAZ;;AACA,UAAGS,aAAa,IAAIA,aAAa,CAACR,MAAd,GAAuB,CAA3C,EAA6C;AACzCM,QAAAA,KAAK,CAAC,sBAAD,CAAL;AACH;AACJ,KAtB6B;AAAA;;AAwBlCK,EAAAA,MAAM,GAAE;AACF,WACC,oBAAC,QAAD;AAAU,MAAA,MAAM,EAAE,KAAKJ,QAAvB;AAAiC,MAAA,MAAM,EAAEZ,SAAzC;AAAoD,MAAA,QAAQ,EAAE,KAA9D;AAAqE,MAAA,OAAO,EAAED,UAA9E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACM,CAAC;AAACkB,MAAAA,YAAD;AAAeC,MAAAA;AAAf,KAAD,KACG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,6CAASD,YAAY,EAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QACE,+CAAWC,aAAa,EAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iEAFF,CADF,CAFT,CADD;AAYD;;AArC6B;;AAwClC,eAAejB,GAAf","sourcesContent":["import React from 'react';\nimport Dropzone from 'react-dropzone';\n\n\n\nconst imgMaxSize = 100000000//bytes;\nconst FileTypes = ['image/x-png', 'image/png', 'image/jpg', 'image/jpeg', 'image/gif']\nclass App extends React.Component {\n  //const {acceptedFiles, getRootProps, getInputProps} = useDropzone();\n  \n\n    alertFile = (files) => {\n        if(files && files.length>0){\n            const currentFile = files[0];\n            const currentFileSize = currentFile.size;\n            const currentFileType = currentFile.type;\n            if(currentFileSize > imgMaxSize){\n                alert(\"This file is too big\");\n                return false;\n            }\n        }\n\n    };\n\n    onDropFn = (files, rejectedFiles) => {\n        console.log(files);\n        if(rejectedFiles && rejectedFiles.length > 0){\n            alert(\"This file is too big\");\n        }\n    };\n\nrender(){\n      return (\n       <Dropzone onDrop={this.onDropFn} accept={FileTypes} multiple={false} maxSize={imgMaxSize}>\n            {({getRootProps, getInputProps}) => (\n                <section>\n                  <div {...getRootProps()}>\n                    <input {...getInputProps()} />\n                    <p>Drag 'n' drop some files here, or click to select files</p>\n                  </div>\n                </section>\n            )}\n        </Dropzone>\n      );\n    }\n}\n\nexport default App;\n\n"]},"metadata":{},"sourceType":"module"}