{"ast":null,"code":"var _jsxFileName = \"/home/alvis/Desktop/image-cropper/client/src/App.js\";\nimport React from 'react';\nimport Dropzone from 'react-dropzone';\nimport ReactCrop from 'react-image-crop';\nimport 'react-image-crop/dist/ReactCrop.css';\nconst imgMaxSize = 100000000; //bytes;\n\nconst FileTypes = ['image/x-png', 'image/png', 'image/jpg', 'image/jpeg', 'image/gif'];\n\nclass App extends React.Component {\n  //const {acceptedFiles, getRootProps, getInputProps} = useDropzone();\n  constructor(props) {\n    super(props);\n\n    this.alertFile = files => {\n      if (files && files.length > 0) {\n        const currentFile = files[0];\n        const currentFileSize = currentFile.size;\n        const currentFileType = currentFile.type;\n\n        if (currentFileSize > imgMaxSize) {\n          alert(\"This file is too big\");\n          return false;\n        }\n\n        if (!FileTypes.includes(currentFileType)) {\n          alert(\"This file type is not supported\");\n          return false;\n        }\n\n        return true;\n      }\n    };\n\n    this.onDropFn = (files, rejectedFiles) => {\n      console.log(files);\n\n      if (rejectedFiles && rejectedFiles.length > 0) {\n        this.alertFile(rejectedFiles);\n      }\n\n      if (files && files.length > 0) {\n        const isVerified = this.alertFile(files);\n\n        if (isVerified) {\n          const currentFile = files[0];\n          const reader = new FileReader();\n          reader.addEventListener(\"load\", () => {\n            this.setState({\n              imgSrc: reader.result\n            });\n          }, false);\n          reader.readAsDataURL(currentFile);\n        }\n      }\n    };\n\n    this.handleImageLoaded = image => {\n      console.log(image);\n    };\n\n    this.handleOnCropChange = crop => {\n      console.log(crop);\n      this.setState({\n        crop: crop\n      });\n      console.log(this.state);\n    };\n\n    this.handleOnCropComplete = (crop, pixelCrop) => {\n      console.log(crop, pixelCrop);\n    };\n\n    this.state = {\n      imgSrc: null,\n      crop: {\n        aspects: 1 / 1\n      }\n    };\n  }\n\n  render() {\n    const imgSrc = this.state.imgSrc;\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82\n      },\n      __self: this\n    }, imgSrc !== null ? React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86\n      },\n      __self: this\n    }, React.createElement(ReactCrop, {\n      src: imgSrc,\n      crop: this.state.crop,\n      onImageLoaded: this.handleImageLoaded,\n      onComplete: this.handleOnCropComplete,\n      onChange: this.handleOnCropChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90\n      },\n      __self: this\n    })) : React.createElement(Dropzone, {\n      onDrop: this.onDropFn,\n      accept: FileTypes,\n      multiple: false,\n      maxSize: imgMaxSize,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99\n      },\n      __self: this\n    }, ({\n      getRootProps,\n      getInputProps\n    }) => React.createElement(\"section\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101\n      },\n      __self: this\n    }, React.createElement(\"div\", Object.assign({}, getRootProps(), {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102\n      },\n      __self: this\n    }), React.createElement(\"input\", Object.assign({}, getInputProps(), {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103\n      },\n      __self: this\n    })), React.createElement(\"button\", {\n      style: {\n        marginTop: \"540px\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104\n      },\n      __self: this\n    }, \"Drag 'n' drop some files here, or click to select files\"))))));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/home/alvis/Desktop/image-cropper/client/src/App.js"],"names":["React","Dropzone","ReactCrop","imgMaxSize","FileTypes","App","Component","constructor","props","alertFile","files","length","currentFile","currentFileSize","size","currentFileType","type","alert","includes","onDropFn","rejectedFiles","console","log","isVerified","reader","FileReader","addEventListener","setState","imgSrc","result","readAsDataURL","handleImageLoaded","image","handleOnCropChange","crop","state","handleOnCropComplete","pixelCrop","aspects","render","getRootProps","getInputProps","marginTop"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,gBAArB;AACA,OAAOC,SAAP,MAAsB,kBAAtB;AACA,OAAO,qCAAP;AAIA,MAAMC,UAAU,GAAG,SAAnB,C,CAA4B;;AAC5B,MAAMC,SAAS,GAAG,CAAC,aAAD,EAAgB,WAAhB,EAA6B,WAA7B,EAA0C,YAA1C,EAAwD,WAAxD,CAAlB;;AACA,MAAMC,GAAN,SAAkBL,KAAK,CAACM,SAAxB,CAAkC;AAChC;AACAC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;;AADiB,SAYjBC,SAZiB,GAYJC,KAAD,IAAW;AACnB,UAAGA,KAAK,IAAIA,KAAK,CAACC,MAAN,GAAa,CAAzB,EAA2B;AACvB,cAAMC,WAAW,GAAGF,KAAK,CAAC,CAAD,CAAzB;AACA,cAAMG,eAAe,GAAGD,WAAW,CAACE,IAApC;AACA,cAAMC,eAAe,GAAGH,WAAW,CAACI,IAApC;;AACA,YAAGH,eAAe,GAAGV,UAArB,EAAgC;AAC5Bc,UAAAA,KAAK,CAAC,sBAAD,CAAL;AACA,iBAAO,KAAP;AACH;;AACD,YAAG,CAACb,SAAS,CAACc,QAAV,CAAmBH,eAAnB,CAAJ,EAAwC;AACpCE,UAAAA,KAAK,CAAC,iCAAD,CAAL;AACA,iBAAO,KAAP;AACH;;AACD,eAAO,IAAP;AACH;AAEJ,KA5BgB;;AAAA,SA8BjBE,QA9BiB,GA8BN,CAACT,KAAD,EAAQU,aAAR,KAA0B;AACjCC,MAAAA,OAAO,CAACC,GAAR,CAAYZ,KAAZ;;AACA,UAAGU,aAAa,IAAIA,aAAa,CAACT,MAAd,GAAuB,CAA3C,EAA6C;AAC1C,aAAKF,SAAL,CAAeW,aAAf;AACF;;AACD,UAAGV,KAAK,IAAIA,KAAK,CAACC,MAAN,GAAa,CAAzB,EAA4B;AACxB,cAAMY,UAAU,GAAG,KAAKd,SAAL,CAAeC,KAAf,CAAnB;;AACA,YAAGa,UAAH,EAAe;AACX,gBAAMX,WAAW,GAAGF,KAAK,CAAC,CAAD,CAAzB;AACA,gBAAMc,MAAM,GAAG,IAAIC,UAAJ,EAAf;AACAD,UAAAA,MAAM,CAACE,gBAAP,CAAwB,MAAxB,EAAgC,MAAM;AAClC,iBAAKC,QAAL,CAAc;AACVC,cAAAA,MAAM,EAAEJ,MAAM,CAACK;AADL,aAAd;AAIH,WALD,EAKG,KALH;AAOAL,UAAAA,MAAM,CAACM,aAAP,CAAqBlB,WAArB;AACH;AAGJ;AACJ,KApDgB;;AAAA,SAuDjBmB,iBAvDiB,GAuDIC,KAAD,IAAW;AAC3BX,MAAAA,OAAO,CAACC,GAAR,CAAYU,KAAZ;AACH,KAzDgB;;AAAA,SA0DjBC,kBA1DiB,GA0DKC,IAAD,IAAU;AAC3Bb,MAAAA,OAAO,CAACC,GAAR,CAAYY,IAAZ;AACA,WAAKP,QAAL,CAAc;AAACO,QAAAA,IAAI,EAACA;AAAN,OAAd;AACAb,MAAAA,OAAO,CAACC,GAAR,CAAY,KAAKa,KAAjB;AACH,KA9DgB;;AAAA,SA+DjBC,oBA/DiB,GA+DM,CAACF,IAAD,EAAOG,SAAP,KAAqB;AACxChB,MAAAA,OAAO,CAACC,GAAR,CAAYY,IAAZ,EAAiBG,SAAjB;AACH,KAjEgB;;AAEjB,SAAKF,KAAL,GAAa;AACTP,MAAAA,MAAM,EAAE,IADC;AAETM,MAAAA,IAAI,EAAE;AACFI,QAAAA,OAAO,EAAE,IAAE;AADT;AAFG,KAAb;AAOD;;AA0DHC,EAAAA,MAAM,GAAE;AAAA,UACGX,MADH,GACa,KAAKO,KADlB,CACGP,MADH;AAEF,WACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAGCA,MAAM,KAAK,IAAX,GACG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAIA,oBAAC,SAAD;AAAW,MAAA,GAAG,EAAIA,MAAlB;AACA,MAAA,IAAI,EAAI,KAAKO,KAAL,CAAWD,IADnB;AAEA,MAAA,aAAa,EAAI,KAAKH,iBAFtB;AAGA,MAAA,UAAU,EAAI,KAAKK,oBAHnB;AAIA,MAAA,QAAQ,EAAI,KAAKH,kBAJjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAJA,CADH,GAcK,oBAAC,QAAD;AAAW,MAAA,MAAM,EAAE,KAAKd,QAAxB;AAAkC,MAAA,MAAM,EAAEf,SAA1C;AAAqD,MAAA,QAAQ,EAAE,KAA/D;AAAsE,MAAA,OAAO,EAAED,UAA/E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACD,CAAC;AAACqC,MAAAA,YAAD;AAAeC,MAAAA;AAAf,KAAD,KACG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,6CAASD,YAAY,EAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QACE,+CAAWC,aAAa,EAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OADF,EAEE;AAAQ,MAAA,KAAK,EAAI;AAACC,QAAAA,SAAS,EAAE;AAAZ,OAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAwC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iEAAxC,CAFF,CADF,CAFF,CAjBN,CADF;AAmCD;;AA1G6B;;AA6GlC,eAAerC,GAAf","sourcesContent":["import React from 'react';\nimport Dropzone from 'react-dropzone';\nimport ReactCrop from 'react-image-crop';\nimport 'react-image-crop/dist/ReactCrop.css';\n\n\n\nconst imgMaxSize = 100000000//bytes;\nconst FileTypes = ['image/x-png', 'image/png', 'image/jpg', 'image/jpeg', 'image/gif']\nclass App extends React.Component {\n  //const {acceptedFiles, getRootProps, getInputProps} = useDropzone();\n  constructor(props) {\n    super(props)\n    this.state = {\n        imgSrc: null, \n        crop: {\n            aspects: 1/1,\n            \n        } \n    }\n  }\n  \n\n    alertFile = (files) => {\n        if(files && files.length>0){\n            const currentFile = files[0];\n            const currentFileSize = currentFile.size;\n            const currentFileType = currentFile.type;\n            if(currentFileSize > imgMaxSize){\n                alert(\"This file is too big\");\n                return false;\n            }\n            if(!FileTypes.includes(currentFileType)){\n                alert(\"This file type is not supported\");\n                return false;\n            }\n            return true;\n        }\n\n    };\n\n    onDropFn = (files, rejectedFiles) => {\n        console.log(files);\n        if(rejectedFiles && rejectedFiles.length > 0){\n           this.alertFile(rejectedFiles);\n        }\n        if(files && files.length>0 ){\n            const isVerified = this.alertFile(files)\n            if(isVerified) {\n                const currentFile = files[0]\n                const reader = new FileReader()\n                reader.addEventListener(\"load\", () => {\n                    this.setState({\n                        imgSrc: reader.result\n                    })\n\n                }, false)\n\n                reader.readAsDataURL(currentFile)\n            }\n\n\n        }\n    }\n    \n\n    handleImageLoaded = (image) => {\n        console.log(image)\n    }\n    handleOnCropChange = (crop) => {\n        console.log(crop)\n        this.setState({crop:crop})\n        console.log(this.state)\n    }\n    handleOnCropComplete = (crop, pixelCrop) => {\n        console.log(crop,pixelCrop)\n    }\n\nrender(){\n    const {imgSrc} = this.state\n      return (\n        <div>\n        \n\n        {imgSrc !== null ? \n            <div> \n                \n\n           \n            <ReactCrop src = {imgSrc} \n            crop = {this.state.crop} \n            onImageLoaded = {this.handleImageLoaded}\n            onComplete = {this.handleOnCropComplete}\n            onChange = {this.handleOnCropChange}/>\n            </div>\n\n           \n\n            : <Dropzone  onDrop={this.onDropFn} accept={FileTypes} multiple={false} maxSize={imgMaxSize}>\n            {({getRootProps, getInputProps}) => (\n                <section>\n                  <div {...getRootProps()}>\n                    <input {...getInputProps()} />\n                    <button style = {{marginTop: \"540px\"}} ><p>Drag 'n' drop some files here, or click to select files</p></button>\n                  </div>\n                </section>\n            )}\n        </Dropzone>\n\n    }\n\n       \n        </div>\n        \n      );\n    }\n}\n\nexport default App;\n\n"]},"metadata":{},"sourceType":"module"}